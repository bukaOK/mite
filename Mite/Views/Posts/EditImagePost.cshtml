@using Mite.Extensions
@using Mite.CodeData.Enums
@model Mite.Models.ImagePostModel

@{ 
    var tagsRow = Model.Tags == null ? string.Empty : string.Join(",", Model.Tags);
}
<div class="ui segment">
    <h2 class="ui dividing header">@ViewBag.Title</h2>
    <form class="ui stackable two column center aligned grid form" id="imgPostForm">
        <div class="column">
            <label class="ui dashed drop-zone segment" ondragover="FileReaderHelper.dragOverHandler(event)" ondrop="FileReaderHelper.dropHandler(event)">
                <span class="ui small blue header"><i class="cloud download icon"></i>Перетащите или нажмите</span>
                <input type="file" onchange="FileReaderHelper.inputDownloadHandler(event)" style="display: none" />
            </label>
            <div class="img-wrapper" id="img-wrapper">
                @if (!string.IsNullOrEmpty(Model.Content))
                {
                    <img src="@Model.Content" alt="@Model.Header" style="max-width: 100%" />
                }
            </div>
        </div>
        <div class="left aligned column">
            @Html.EditorFor(x => x.Header)
            @Html.HiddenFor(x => x.Content)
            @Html.EditorFor(x => x.Description)
            <div class="field">
                <div class="ui fluid search multiple selection dropdown" id="select-tags">
                    <i class="dropdown icon"></i>
                    <input type="hidden" name="Tags" id="Tags" value="@tagsRow" />
                    <div class="default text">Теги</div>
                    <div class="menu"></div>
                </div>
            </div>
            <div class="ui blue icon message">
                <i class="info icon"></i>
                <div class="content">
                    <div class="header">
                        Внимание!
                    </div>
                    <p>
                        Вы также можете добавлять другие тематические теги,
                        <b>не включенные в список сервиса</b> (теги, содержащие названия, бренды и пр., будут удаляться).
                    </p>
                </div>
            </div>
        </div>
        <div class="ten wide column">
            <button type="button" class="ui green button" id="save-btn">Сохранить</button>
            <div class="ui error message" id="result-msg"></div>
        </div>
    </form>
</div>
<div class="ui small modal" id="saveModal">
    <i class="close icon"></i>
    <div class="header">
        Опубликовать работу?
    </div>
    <div class="content">
        После публикации работу можно будет отредактировать в течение трёх дней.
        При нажатии "Нет" она сохранится в черновиках и будет доступна для изменений в любое время.
    </div>
    <div class="actions">
        <button class="ui red cancel button">Нет, просто сохранить</button>
        <button class="ui green ok button">Да</button>
    </div>
</div>
<script>
    function savePost(isPublished){
        var $saveBtn = $('#save-btn');
        $saveBtn.addClass('loading disabled');
        var $resultMsg = $('#result-msg');
        @{
            var url = string.IsNullOrEmpty(Model.Header)
                ? "/posts/addpost"
                : "/posts/updatepost";
        }
        var postType = isPublished ? '@PostTypes.Published' : '@PostTypes.Drafts';
        var model = {
            Header: $('#Header').val(),
            Content: $('#Content').val(),
            Description: $('#Description').val(),
            ContentType: '@PostContentTypes.Image',
            Type: postType,
            Id: '@Model.Id',
            Tags: $('#Tags').val().split(',')
        };
        if(isPublished){
            model.PublishDate = new Date().toISOString();
        }
        $.ajax({
            url: '@url',
            data: model,
            type: 'post',
            dataType: 'json',
            success: function (resp) {
                if (resp.status === Settings.apiStatuses.validationError) {
                    var errorStr = 'Ошибка при сохранении: ' + resp.message;
                    $('#imgPostForm').form('add errors', [errorStr]);
                } else {
                    iziToast.success({
                        title: 'Успешно!',
                        message: 'Работа сохранена.'
                    });
                    location.reload();
                }
            },
            error: function (jqXhr) {
                $('#imgPostForm').form('add errors', ['Ошибка во время добавления поста']);
            },
            complete: function (jqXhr) {
                $saveBtn.removeClass('loading disabled');
                $resultMsg.removeClass('hidden');
            }
        });
    }
    $(function() {
        var isImageLarge = false;
        ViewHelper.activateSidebarItem('#editImageItem');
        ViewHelper.disableFormSubmitting('#imgPostForm');
        $('.ui.checkbox').checkbox();
        TagsApi.loadDropdown('#select-tags', '@tagsRow'.split(','));
        //Отправляем форму
        $('#save-btn').click(function(ev) {
            var $saveBtn = $(this);
            var isPublished = @Model.IsPublished.ToString().ToLower();
            if(isPublished){
                savePost(true);
            }
            if ($('#imgPostForm').form('validate form') && !isPublished && !isImageLarge) {
                $('#saveModal').modal('show');
            } else if (isImageLarge) {
                $('#imgPostForm').form('add errors', ['Размер файла не может быть больше 30 мбайт']);
            }
        });
        @Html.Raw(Html.FormValidation<Mite.Models.ImagePostModel>("#imgPostForm"))
        $("#saveModal").modal({
            onDeny: function(){
                savePost(false);
            },
            onApprove: function(){
                savePost(true);
            }
        });
    });
</script>