@using Mite.Extensions
@model Mite.Models.ImagePostModel

@{ 
    var tagsRow = Model.Tags == null ? string.Empty : string.Join(",", Model.Tags);
}
<div class="ui segment">
    <h2 class="ui dividing header">@ViewBag.Title</h2>
    @using (Html.BeginForm("AddPost", "Posts", FormMethod.Post, new { @class = "ui stackable two column center aligned grid form", id = "imgPostForm" }))
    {
        <div class="column">
            <input type="file" id="img-download" style="display: none">
            <label for="img-download" class="ui labeled icon large primary button">
                Загрузить
                <i class="cloud download icon"></i>
            </label>
            <div class="ui section divider horizontal">Или</div>
            <div class="ui dashed segment" id="drop-zone">
                <h3 class="ui disabled grey">Перетащите сюда</h3>
            </div>
        </div>
        <div class="left aligned column">
            @Html.EditorFor(x => x.Header)
            @Html.HiddenFor(x => x.Content)
            @Html.EditorFor(x => x.Description)
            <div class="field">
                <div class="ui fluid search multiple selection dropdown" id="select-tags">
                    @Html.HiddenFor(x => x.Tags, new { Value = tagsRow })
                    <div class="default text">Теги</div>
                    <div class="menu">
                    </div>
                </div>
            </div>
            <div class="ui blue icon message">
                <i class="info icon"></i>
                <div class="content">
                    <div class="header">
                        Внимание!
                    </div>
                    <p>
                        Вы также можете добавлять другие тематические теги,
                        <b>не включенные в список сервиса</b> (теги, содержащие названия, бренды и пр., будут удаляться).
                    </p>
                </div>
            </div>
        </div>
        <div class="ten wide column">
            <div id="img-wrapper">
                @if (!string.IsNullOrEmpty(Model.Content))
                {
                    <img src="@Model.Content" alt="@Model.Header" style="max-width: 100%" />
                }
            </div>
            <button type="button" class="ui green button" id="save-btn">Сохранить</button>
            @Html.ValidationSum("result-msg")
            <div class="ui hidden error message" style="text-align: center" id="result-msg"></div>
        </div>
    }
</div>
<div class="ui small modal" id="saveModal">
    <i class="close icon"></i>
    <div class="header">
        Опубликовать работу?
    </div>
    <div class="content">
        После публикации работу можно будет отредактировать в течение трёх дней.
        При нажатии "Нет" она сохранится в черновиках и будет доступна для изменений в любое время.
    </div>
    <div class="actions">
        <button class="ui red cancel button">Нет, просто сохранить</button>
        <button class="ui green ok button">Да</button>
    </div>
</div>
<script>
    function savePost(isPublished){
        var $saveBtn = $('#save-btn');
        $saveBtn.addClass('loading disabled');
        var $resultMsg = $('#result-msg');
        @{
            var url = string.IsNullOrEmpty(Model.Header)
                ? Url.RouteUrl("AddPost", new { postType = 0 })
                : Url.Action("UpdatePost", "Posts");
        }
        var model = {
            Header: $('#Header').val(),
            Content: $('#Content').val(),
            Description: $('#Description').val(),
            IsImage: true,
            Id: '@Model.Id',
            Tags: $('#Tags').val().split(',')
        };
        if(isPublished){
            model.PublishDate = new Date().toISOString();
        }
        $.ajax({
            url: '@url',
            data: model,
            type: 'post',
            dataType: 'json',
            success: function (resp) {
                var validErrorStatus = @((byte)Mite.Core.JsonStatuses.ValidationError);
                if(resp.status == validErrorStatus){
                    $resultMsg.addClass('red').removeClass('green');
                    var errorStr = 'Ошибка при сохранении: ' + resp.message;
                    $resultMsg.html(errorStr)
                } else{
                    $resultMsg.addClass('green').removeClass('red');
                    $resultMsg.html('Работа успешно сохранена.');
                    if(isPublished){
                        location.href = "/user/profile/@User.Identity.Name";
                    } else{
                        location.href = "/user/profile/@User.Identity.Name#posts/drafts";
                    }
                }
            },
            error: function (jqXhr) {
                $resultMsg.addClass('red').removeClass('green');
                $resultMsg.html('Ошибка во время добавления поста')
            },
            complete: function (jqXhr) {
                $saveBtn.removeClass('loading disabled');
                $resultMsg.removeClass('hidden');
            }
        });
    }
    $(function() {
        var isImageLarge = false;
        ViewHelper.activateSidebarItem('#editImageItem');
        ViewHelper.disableFormSubmitting('#imgPostForm');
        $('.ui.checkbox').checkbox();
        $.ajax({
            url: '/api/tags',
            type: 'get',
            success: function(data){
                var tagsMenu = $('#select-tags');
                var tagsItems = '';
                for(var i = 0; i < data.length; i++){
                    tagsItems += '<div class="item" data-value="' + data[i].Name + '">' + data[i].Name + '</div>'
                }
                tagsMenu.children('.menu').html(tagsItems);
                tagsMenu.dropdown({
                    allowAdditions: true,
                    fullTextSearch: true,
                    keys: {
                        delimiter: false
                    },
                    showOnFocus: false,
                    forceSelection: false,
                    match: 'text',
                    onShow: function(){
                        $(this).children('.menu').perfectScrollbar();
                    }
                });
            },
            error: function(jqXhr){
                alert('Ошибка инициализации тегов.');
            }
        });
        //Отправляем форму
        $('#save-btn').click(function(ev) {
            var $saveBtn = $(this);
            var isPublished = @Model.IsPublished.ToString().ToLower();
            if(isPublished){
                savePost(true);
            }
            if ($('#imgPostForm').form('validate form') && !isPublished && !isImageLarge) {
                $('#saveModal').modal('show');
            } else if (isImageLarge) {
                $('#imgPostForm').form('add errors', ['Размер файла не может быть больше 30 мбайт']);
            }
        });
        $('#imgPostForm').form({
            fields: {
                @Html.IdFor(x => x.Header): {
                    rules: [
                        {
                            type: 'empty',
                            prompt: $('#@Html.IdFor(x => x.Header)').data('valRequired')
                        },
                        {
                            type: 'maxLength[' + $('#Header').data('val-maxlength-max') + ']',
                            prompt: $('#Header').data('val-maxlength')
                        }
                    ]
                },
                Description: {
                    rules: [
                        {
                            type: 'maxLength[' + $('#Description').data('val-maxlength-max') + ']',
                            prompt: $('#Description').data('val-maxlength')
                        }
                    ]
                },
                @Html.IdFor(x => x.Content): {
                    rules: [
                        {
                            type: 'empty',
                            prompt: $('#@Html.IdFor(x => x.Content)').data('valRequired')
                        }
                    ]
                }
            }
        });
        $("#saveModal").modal({
            onDeny: function(){
                savePost(false);
            },
            onApprove: function(){
                savePost(true);
            }
        });
        function readFile(file, evt) {
            var reader = new FileReader();
            reader.onprogress = function () {
                $(evt).addClass('loading');
            };
            reader.onloadend = function () {
                $(evt).removeClass('loading');
            };
            reader.onload = function () {
                $('#save-btn').show();
                $('#img-wrapper').html('<img src="' + reader.result + '" style="max-width: 100%"/>');
                $('#Content').val(reader.result);
            };
            if(file.size / 1024 / 1024 > 30){
                isImageLarge = true;
            }
            reader.readAsDataURL(file);
        }
        //Когда перемещаем файл мышкой и курсор над областью
        function dragOverHandler(evt) {
            evt.stopPropagation();
            evt.preventDefault();
            evt.dataTransfer.dropEffect = "copy";
        }

        //Когда переместили файл
        function dropHandler(evt) {
            evt.stopPropagation();
            evt.preventDefault();
            var file = evt.dataTransfer.files[0];
            readFile(file, evt);
        }

        function inputDownloadHandler(evt) {
            var file = evt.target.files[0];
            readFile(file, evt);
        }
        //Настраиваем загрузку файлов
        var dropZone = document.getElementById("drop-zone");
        dropZone.ondragover = dragOverHandler;
        dropZone.ondrop = dropHandler;

        var inputDownload = document.getElementById("img-download");
        inputDownload.onchange = inputDownloadHandler;
    });
</script>