@using Mite.Extensions
@using Mite.CodeData.Enums
@model Mite.Models.ImagePostModel

@{
    var tagsRow = Model.Tags == null ? string.Empty : string.Join(",", Model.Tags);
    var url = string.IsNullOrEmpty(Model.Header) ? "/posts/addpost" : "/posts/updatepost";
}
@section styles{
    <style>
        #wmEdit:not(.active), #productEdit:not(.active){
            display: none;
        }
        .dashed.drop-zone.segment{
            text-align: center;
        }
        input[type="file"]{
            display: none;
        }
    </style>
}
<div class="ui segment">
    <h2 class="ui dividing header">@ViewBag.Title</h2>
    <form class="ui stackable two column center aligned grid form" id="imgPostForm">
        @Html.HiddenFor(x => x.Id)
        <div class="column">
            @if(Model.Id == Guid.Empty)
            {
                <label class="ui dashed drop-zone segment" id="imgDropZone">
                    <span class="ui small blue header"><i class="cloud download icon"></i>Перетащите или нажмите</span>
                    <input type="file" id="imgFile" />
                </label>
            }
            <div class="img-wrapper" id="img-wrapper">
                @if (!string.IsNullOrEmpty(Model.Content))
                {
                    <img src="@Model.Content" alt="@Model.Header" style="max-width: 100%" />
                }
            </div>
            <div class="ui teal indicating progress" id="imgProgress">
                <div class="bar">
                    <div class="progress"></div>
                </div>
            </div>
            <div class="ui info blue message">
                <div class="content">
                    <div class="header">Информация</div>
                    <ul class="list">
                        <li>Максимальный суммарный размер всех файлов, включая изображения и бонус для товара - <b>50 мбайт</b></li>
                        <li>Бонусы необходимо загружать в архиве <b>rar</b> или <b>zip</b></li>
                        <li>Для удаления товара переместите ползунок в неактивное состояние</li>
                        <li>Поскольку при изменении работы используется оригинал изображения, <b>водяной знак может быть не виден</b></li>
                        <li>Для изменения водяного знака необходимо сначала удалить старый</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="left aligned column">
            @Html.HiddenFor(x => x.ProductId)
            @Html.HiddenFor(x => x.WatermarkId)
            @Html.EditorFor(x => x.Header)
            @Html.HiddenFor(x => x.Content)
            @Html.EditorFor(x => x.Description)
            <div class="field">
                <div class="ui fluid search multiple selection dropdown" id="select-tags">
                    <i class="dropdown icon"></i>
                    @Html.HiddenFor(x => x.Tags, new { Value = tagsRow })
                    <div class="default text">Теги</div>
                    <div class="menu">
                        @foreach (var aTag in Model.AvailableTags)
                        {
                            <div class="item" data-value="@aTag">@aTag</div>
                        }
                    </div>
                </div>
            </div>
            @if(Model.WatermarkId != null)
            {
                <button type="button" class="ui margined red button" id="removeWatBtn">Удалить водяной знак</button>
                <div class="ui toggle checkbox" id="WmNeedCheck" style="display: none">
                    <input type="checkbox" name="WmNeed" autocomplete="off" checked />
                    <label>Водяной знак</label>
                </div>
            }
            else
            {
                <div class="ui toggle checkbox" id="WmNeedCheck">
                    <input type="checkbox" name="WmNeed" autocomplete="off" />
                    <label>Водяной знак</label>
                </div>
            }
            <div id="wmEdit">
                @{ Html.RenderAction("Edit", "Watermark", new { id = Model.WatermarkId }); }
            </div>
            <br />
            <div class="ui toggle checkbox" id="ProdNeedCheck">
                <input type="checkbox" name="ProdNeed" autocomplete="off" @Html.Raw(Model.ProductId == null ? "" : "checked") />
                <label>Товар</label>
            </div>
            @{ Html.RenderAction("Edit", "Products", new { id = Model.ProductId }); }
            <button type="button" class="ui fluid green button" id="save-btn">Сохранить работу</button>
            <div class="ui error message" id="result-msg"></div>
        </div>
    </form>
</div>
<div class="ui small modal" id="saveModal">
    <i class="close icon"></i>
    <div class="header">
        Опубликовать работу?
    </div>
    <div class="content">
        После публикации работу можно будет отредактировать в течение трёх дней.
        При нажатии "Нет" она сохранится в черновиках и будет доступна для изменений в любое время.
    </div>
    <div class="actions">
        <button class="ui red cancel button">Нет, просто сохранить</button>
        <button class="ui green ok button">Да</button>
    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/api")
    <script>
        $(function () {
            var readSettings = {
                progress: $('#imgProgress'),
                field: $('#Content'),
                imgWrapper: $('#img-wrapper')
            };
            $('#imgFile').change(function (ev) {
                FileReaderHelper.inputDownloadHandler(ev, readSettings);
            });
            $('#imgDropZone').on('dragover', function (ev) {
                FileReaderHelper.dragOverHandler(ev);
            }).on('drop', function (ev) {
                FileReaderHelper.dropHandler(ev, readSettings);
            });
            var isImageLarge = false;
            ViewHelper.activateSidebarItem('#editImageItem');
            ViewHelper.disableFormSubmitting('#imgPostForm');
            $('#WmNeedCheck').checkbox({
                onChange: function () {
                    $('#wmEdit').toggleClass('active');
                }
            });
            $('#ProdNeedCheck').checkbox({
                onChange: function () {
                    $('#productEdit').toggleClass('active');
                }
            });
            $('#select-tags').dropdown({
                allowAdditions: true,
                fullTextSearch: true,
                keys: {
                    delimiter: 13
                },
                match: 'text',
                forceSelection: false
            });
            $('#WmPosition').dropdown();
            //Отправляем форму
            $('#save-btn').click(function(ev) {
                var $saveBtn = $(this)
                    isPublished = @Model.IsPublished.ToString().ToLower();
                if (isPublished) {
                    Posts.Api.saveImage(true, '@url', '@Model.Id');
                }
                else if ($('#imgPostForm').form('validate form')) {
                    $('#saveModal').modal('show');
                }
            });
            @Html.Raw(Html.FormValidation<Mite.Models.ImagePostModel>("#imgPostForm"))
            $("#saveModal").modal({
                onDeny: function () {
                    Posts.Api.saveImage(false, '@url', '@Model.Id');
                },
                onApprove: function () {
                    Posts.Api.saveImage(true, '@url', '@Model.Id');
                }
            });
            $('#removeWatBtn').click(function () {
                $('#WatermarkId').val('');
                $(this).hide();
                $('#WmNeedCheck').checkbox('set unchecked').show();
            });
            $('#removeProdBtn').click(function () {
                $('#ProductId').val('');
                $(this).hide();
                $('#ProdNeedCheck').show();
            });
        });
    </script>
}