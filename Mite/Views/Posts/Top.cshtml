@using Mite.CodeData.Enums
@using Mite.Helpers
@model Mite.Models.TopModel
@{
    ViewBag.Title = "Публикации";
    ViewBag.MetaDescription = "Топ работ";
}
@section styles{
    <style>
        .tags.modal .ui.large.label{
            margin-bottom: 4px;
        }
        .tags.modal .basic.segment:not(.loading){
            padding: 0;
        }
        .right.floated{
            float: right;
        }
        .item#searchItem{
            min-width: 0px;
            flex-shrink: 1;
        }
    </style>
}
<div class="active loader-wrapper"><div class="ui active loader"></div></div>
<div class="ui stackable menu">
    <div class="item">
        <i class="filter icon"></i>
        Сначала&nbsp;
        <div class="ui inline dropdown" id="sortType">
            <div class="text">новые</div>
            <i class="dropdown icon"></i>
            <div class="menu">
                <div class="active item" data-text="новые" data-value="@((byte)SortFilter.New)">Новые</div>
                <div class="item" data-text="высший рейтинг" data-value="@((byte)SortFilter.Popular)">Высший рейтинг</div>
                <div class="item" data-text="старые" data-value="@((byte)SortFilter.Old)">Старые</div>
            </div>
        </div>
    </div>
    <div class="item">
        <i class="calendar icon"></i>
        Искать за&nbsp;
        <div class="ui inline dropdown" id="postTimeFilter">
            <div class="text">все время</div>
            <i class="dropdown icon"></i>
            <div class="menu">
                <div class="active item" data-text="все время" data-value="@((byte)PostTimeFilter.All)">Все время</div>
                <div class="item" data-text="последний месяц" data-value="@((byte)PostTimeFilter.Month)">Последний месяц</div>
                <div class="item" data-text="последнюю неделю" data-value="@((byte)PostTimeFilter.Week)">Последняя неделя</div>
                <div class="item" data-text="последний день" data-value="@((byte)PostTimeFilter.Day)">Последний день</div>
            </div>
        </div>
    </div>
    <div class="item">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="ui checkbox" id="postUserFilter">
                <input type="checkbox" @Html.Raw(Model.ShowOnlyFollowings ? "checked" : "") />
                <label>Только подписки</label>
            </div>
        }
        else
        {
            <div class="ui disabled checkbox" id="postUserFilter">
                <input type="checkbox" disabled />
                <label>Только подписки</label>
            </div>
        }
    </div>
    <div class="right item" id="searchItem">
        <div class="ui transparent icon input">
            <input type="text" placeholder="Название или описание работы" id="postsSearch" role="search" onfocus="$('#searchItem').addClass('maximised')" 
                   onblur="$('#searchItem').removeClass('maximised')"/>
            <i class="search link icon" onclick="SearchFilters.changeFilter()"></i>
        </div>
    </div>
</div>
<div class="ui stackable grid">
    <div class="three wide computer four wide tablet column">
        <div class="ui top-tags segment">
            <div class="ui dividing medium header">
                Теги
                <a class="ui blue label" onclick="showTagsModal()" title="Показать все теги">все</a>
            </div>
            @foreach(var tag in Model.Tags) {<a class="ui label" onclick="loadTag('#@tag.Name')">@tag.Name</a>}
        </div>
        <div id="vk_groups" style="width: 100%"></div>
        <div class="ui segment">
            <h4 class="ui dividing header">Реклама</h4>
            <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
            <!-- TopAd -->
            <ins class="adsbygoogle"
                 style="display:block"
                 data-ad-client="ca-pub-7675079294669395"
                 data-ad-slot="2018290469"
                 data-ad-format="auto"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
        </div>
    </div>
    <div class="thirteen wide computer twelve wide tablet column">
        @if (ViewHelper.IsMobileDevice(Request))
        {
            <div class="ui posts two column stackable basic segment grid"></div>
        }
        else
        {
            <div class="ui posts three column doubling basic segment grid"></div>
        }
    </div>
</div>
<div class="ui small tags scrolling modal" role="dialog">
    <i class="close icon"></i>
    <div class="header" role="heading">Все теги</div>
    <div class="content" role="document">
        <div class="ui fluid input">
            <input placeholder="Поиск тега" type="text" oninput="TagsApi.inputHandle(this.value)" />
        </div>
        <div class="ui active loading basic segment"></div>
    </div>
</div>
<div id="go-top"></div>
@{ Html.RenderPartial("_TopTemplates"); }
@Scripts.Render("~/bundles/grid", "~/bundles/scroll", "~/bundles/api", "~/bundles/insertion")
<script>
    var tagsInitialized = false;
    var userCardTmpl = $.templates('#miniUserCardTmpl');
    function loadTag(name) {
        $('#postsSearch').val(name);
        SearchFilters.changeFilter();
    }
    function loadFullGif(newPath, postId, $button) {
        $button.addClass('loading');

        var postSelector = '#post' + postId;
        var $img = $(postSelector + ' .img-content .image');
        $img.attr('src', newPath);
        $img.on('load', function () {
            $(postSelector + ' .gif-wrapper').removeClass('active');
            $button.removeClass('loading');
        });
    }
    function showTagsModal() {
        TagsApi.loadTop('.tags.modal>.content>.segment').then(function () {
            $('.tags.modal').modal('refresh');
        });
        $('.tags.modal').modal('show');
    }
    $(function () {
        $('.top-tags .ui.label').each(function (index, el) {
            if ($(this).height() > 12) {
                $(this).css('margin-top', '2px');
            }
        });
        var grid = $('.posts.grid').masonry({
            itemSelector: '.column',
            horizontalOrder: true
        });
        $('#go-top').goTop({
            scrollTop: 100,
            scrollSpeed: 1000,
            fadeInSpeed: 1000,
            fadeOutSpeed: 500
        });
        $('.ui.dropdown').dropdown({
            onChange: function (ev) {
                if (SearchFilters.initialized) {
                    SearchFilters.changeFilter();
                }
            }
        });
        $('#postUserFilter').checkbox({
            onChange: function () {
                if (SearchFilters.initialized) {
                    SearchFilters.changeFilter();
                }
            }
        });
        insertionQ('.post-item').every(function (elem) {
            var $elem = $(elem);
            if ($elem.hasClass('hide-adult-content')) {
                $elem.dimmer({
                    closable: false
                }).dimmer('show');
            }
            $elem.find('a.username').popup({
                position: 'bottom left',
                popup: $(this).siblings('.user-card.popup')[0],
                variation: 'basic',
                hoverable: true,
                inline: true,
                transition: 'slide top',
                preserve: true,
                onShow: function (item) {
                    $.getJSON('/userprofile/getuserprofile', 'name=' + item.dataset.username, function (resp) {
                        var respData = resp.data;
                        respData.PostsCountWord = ViewHelper.getWordCase(respData.PostsCount, 'Работа', 'Работы', 'Работ');
                        respData.FollowersWord = ViewHelper.getWordCase(respData.FollowersCount, 'Подписка', 'Подписки', 'Подписок');
                        $(item).popup('change content', userCardTmpl.render(resp.data))
                            .popup('reposition').addClass('initialized');
                    });
                }
            });
            var $rating = $elem.find('.ui.rating').rating({
                onRate: function (rateValue) {
                    var rateInst = this;
                    RatingMvc.ratePost({
                        rateValue: rateValue,
                        lastRateValue: +this.dataset.rating,
                        postRating: +this.dataset.fullRating,
                        postId: this.dataset.postId,
                        postAuthorId: this.dataset.userId,
                        isTop: true,
                        rateObj: this
                    });
                }
            });
        });
        $('#postsSearch').keydown(function (ev) {
            if (ev.which === 13) {
                SearchFilters.changeFilter();
            }
        });
        SearchFilters.init({
            beforeLoad: function () {
                $('.loader-wrapper').addClass('active');
            },
            onSuccess: function (resp) {
                resp.forEach(function (elem) {
                    elem.PublishDate += elem.PublishDate[elem.PublishDate - 1] === 'Z' ? '' : 'Z';
                    elem.PublicTimeStr = ViewHelper.getPastTense(new Date(elem.PublishDate).getTime());
                    if (elem.User.UserName.length > 15) {
                        elem.User.ShowName = elem.User.UserName.substr(0, 12) + '...';
                    } else {
                        elem.User.ShowName = elem.User.UserName;
                    }
                });
                $('.posts.grid:visible .loader').remove();
                if (resp.length > 0) {
                    var tmpl = $.templates('#topPostTmpl');
                    var html = tmpl.render(resp);

                    if (SearchFilters._loadNextPage) {
                        grid.append(html);
                    } else {
                        grid.html(html);
                    }
                }
                else if (SearchFilters._page <= 1) {
                    grid.html($('#emptyResultTmpl').html());
                }

                grid.masonry('reloadItems').imagesLoaded(function () {
                    $('.loader-wrapper').removeClass('active');
                    grid.masonry('layout');
                }).progress(function () {
                    grid.masonry('layout');
                });
            },
            onError: function () {
                iziToast.error({
                    title: 'Упс!',
                    message: 'Ошибка сервера.'
                });
                $('.loader-wrapper').removeClass('active');
            },
            ajax: {
                url: '@Url.Action("Top", "Posts")'
            },
            filters: [
                {
                    name: 'tags',
                    selector: '#postsSearch',
                    getVal: function () {
                        var arr = $(this.selector).val().split('#')
                        arr.shift();
                        return arr.join();
                    },
                    updateState: function (newVal) {
                        var arr = newVal.split(',');
                        var str = arr.length > 0 ? '#' + arr.join('#') : '';
                        $(this.selector).val(str);
                    }
                },
                {
                    name: 'sortFilter',
                    selector: '#sortType',
                    getVal: function () {
                        return $(this.selector).dropdown('get value') == ''
                            ? '@((byte)SortFilter.New)' : $(this.selector).dropdown('get value');
                    },
                    updateState: function (newVal) {
                        $(this.selector).dropdown('set selected', newVal);
                    }
                },
                {
                    name: 'postTimeFilter',
                    selector: '#postTimeFilter',
                    getVal: function () {
                        return $(this.selector).dropdown('get value') == ''
                            ? '0' : $(this.selector).dropdown('get value');
                    },
                    updateState: function (newVal) {
                        $(this.selector).dropdown('set selected', newVal);
                    }
                },
                {
                    name: 'postUserFilter',
                    selector: '#postUserFilter',
                    getVal: function () {
                        var isChecked = $(this.selector).checkbox('is checked');
                        if (isChecked) {
                            return '@((byte)PostUserFilter.OnlyFollowings)';
                        } else {
                            return '@((byte)PostUserFilter.All)';
                        }
                    },
                    updateState: function (newVal) {
                        $(this.selector).dropdown('set selected', newVal);
                    }
                }
            ]
        });
        Scrolling.init('footer', function () {
            if (!$('.loader-wrapper').hasClass('active')) {
                return SearchFilters.loadNext();
            }
        });
        VK.Widgets.Group("vk_groups", { mode: 3, no_cover: 1, width: $('.top-tags')[0].offsetWidth }, 143219082);
    });
</script>