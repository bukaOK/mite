@using Mite.Helpers
@using Mite.Enums
@using Microsoft.AspNet.Identity
@using Mite.Extensions
@model Mite.Models.PostModel

@{ 
    ViewBag.Title = Model.Header;
    ViewBag.MetaDescription = string.Format("Публикация {0} | {1}", Model.Header, Model.User.UserName);

    var userId = User.Identity.GetUserId();
    var tagsRow = "";
    var vkWidgetImage = Model.IsImage ? "http://" + Request.Url.Host + Model.Content : "";
    var pageUserName = Model.User.UserName;
    var currentUserName = User.Identity.Name;

    if (User.IsInRole("moder"))
    {
        tagsRow = string.Join(",", Model.Tags);
    }

}
<div class="ui segment grid">
    <div class="stackable two column row">
        <div class="column">
            <h2 class="ui header">
                @Model.Header
                <span class="sub header post-time"></span>
            </h2>
        </div>
        <div class="right aligned column">
            <div id="vk_share" style="display: inline-block;"></div>
            @if(currentUserName == pageUserName && Model.CanEdit)
            {
                @Html.ActionLink("Редактировать", "EditPost", "Posts", new { id = Model.Id }, new { @class = "ui primary small compact button" })
            }
        </div>
    </div>
    <div class="row">
        @if (Model.IsImage)
        {
            <div class="fifteen wide centered column">
                <img src="@Model.Content" class="ui centered image"  id="post-content"/>
            </div>
        }
        else
        {
            <div data-editable class="fifteen wide centered column" id="post-content">
                @Html.Raw(Model.Content)
            </div>
        }
    </div>
    <div class="ui divider"></div>
    <div class="stackable row">
        <div class="twelve wide centered column">
            <div class="ui items">
                <div class="item">
                    <div class="ui tiny circular image" style="width: 80px !important">
                        <img src="@Model.User.AvatarSrc" alt="@Model.User.UserName" style="border-radius: 500rem !important;"/>
                    </div>
                    <div class="content">
                        <a href="@Url.Action("Index", "UserProfile", new { name = Model.User.UserName })" class="header">&copy; @Model.User.UserName</a>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="meta">
                                <span>Оценить</span>
                                @Html.HiddenFor(x => x.CurrentRating.Id)
                                @Html.HiddenFor(x => x.CurrentRating.PostId)
                                <div class="ui star rating" data-rating="@Model.CurrentRating.Value" data-max-rating="5"></div>
                                <span id="post-rating" data-rating="@Model.Rating">(@Model.Rating)</span>
                            </div>
                        }
                        <div class="description">
                            <h4>@Model.Description</h4>
                        </div>
                        <div class="extra">
                            @foreach (var tag in Model.Tags)
                            {
                                <a class="ui label" href="/posts/top#input=#@tag">@tag</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (User.IsInRole("moder"))
        {
            <div class="four wide column">
                <div class="ui form">
                    <div class="field">
                        <div class="ui fluid search multiple selection dropdown" id="select-tags">
                            @Html.HiddenFor(x => x.Tags, new { Value = tagsRow })
                            <div class="default text">Теги</div>
                            <div class="menu">
                            </div>
                        </div>
                    </div>
                    <div class="field">
                        <button type="button" class="ui primary button" onclick="updateTags()">Обновить</button>
                    </div>
                    <div class="ui message" id="tagsUpdateMsg" hidden></div>
                </div>
            </div>
            <script>
                function updateTags(){
                    var $msg = $('#tagsUpdateMsg');
                    $.ajax({
                        url: '@Url.Action("UpdatePostTags", "Moder")',
                        type: 'post',
                        data:{
                            postId: '@Model.Id',
                            tagsNames: $('#Tags').val().split(',')
                        },
                        success: function(){
                            $msg.addClass('green').removeClass('red');
                            $msg.html('Теги успешно обновлены');
                        },
                        error: function(){
                            $msg.addClass('red').removeClass('green');
                            $msg.html('Ошибка');
                        },
                        complete: function(){
                            $msg.show();
                        }
                    });
                }
                $(function(){
                    $.ajax({
                        url: '/api/tags',
                        type: 'get',
                        success: function (data) {
                            var tagsMenu = $('#select-tags');
                            var tagsItems = '';
                            for (var i = 0; i < data.length; i++) {
                                tagsItems += '<div class="item" data-value="' + data[i].Name + '">' + data[i].Name + '</div>'
                            }
                            tagsMenu.children('.menu').html(tagsItems);
                            tagsMenu.dropdown({
                                allowAdditions: false,
                                fullTextSearch: true,
                                keys: {
                                    delimiter: false
                                },
                                showOnFocus: false,
                                match: 'text',
                                forceSelection: false
                            });
                        },
                        error: function (jqXhr) {
                            alert('Ошибка инициализации тегов.');
                        }
                    });
                })
            </script>
        }
    </div>
    <div class="ui divider"></div>
    <div class="row">
        <div class="twelve wide computer twelve wide tablet sixteen wide mobile centered column">
            <div class="ui large comments">
                <h4 class="ui header" id="comments-count">
                    @Model.CommentsCount @ViewHelper.GetWordCase(Model.CommentsCount, "комментарий", "комментария", "комментариев")
                </h4>
                @if (User.Identity.IsAuthenticated)
                {
                    <form class="ui form" id="comments-form">
                        <div class="field">
                            <textarea name="CommentContent" id="CommentContent" rows="3" data-reply-comment></textarea>
                        </div>
                        <button type="button" class="ui primary small right labeled icon button" onclick="sendComment('@Model.Id')">
                            Комментировать<i class="icon write"></i>
                        </button>
                        <a href="" id="reply-user"></a>
                        <i id="remove-reply" class="remove red icon" style="display: none; cursor: pointer" onclick="removeReply()"></i>
                    </form>
                }
                else
                {
                    @Html.ActionLink("Зарегистрируйтесь, чтобы оставлять комментарии.", "Register", "Account")
                }
                <div class="ui comments" id="comments-wrapper">
                    <div class="ui active inline centered medium text active loader">Загрузка...</div>
                </div>
            </div>
        </div>
    </div>
</div>
<template id="commentTmpl">
    <div class="comment" id="com{{:Id}}">
        <a class="ui circular avatar image">
            <img src="{{:User.AvatarSrc}}" />
        </a>
        <div class="content">
            <a href="/User/Profile/{{:User.UserName}}" class="author">{{:User.UserName}}</a>
            <div class="metadata">
                {{if ParentComment != null}}
                <i class="violet share icon"></i>{{:ParentComment.User.UserName}} |
                {{/if}}
                <span class="date">{{:PublicDateStr}}</span>
            </div>
            <div class="text">{{:Content}}</div>
            @if (User.Identity.IsAuthenticated)
            {
                <div class="actions">
                    <a data-reply-user="" onclick="addReply('{{:User.UserName}}', '{{:Id}}')">Ответить</a>
                    {{if User.Id == '@User.Identity.GetUserId()'}}
                    <a data-comment-id="{{:Id}}" onclick="deleteComment(this)">Удалить</a>
                    {{/if}}
                    {{if CurrentRating == null || CurrentRating.Value == 0}}
                    <a data-is-rate="false" data-variation="tiny" data-content="Нравится!" onclick="rateComment(this, '{{:Id}}', '{{:User.Id}}')"><i class="thumbs outline up violet icon"></i><span class="rating">{{:Rating}}</span></a>
                    {{else}}
                    <a data-is-rate="true" data-variation="tiny" data-content="Нравится!" onclick="rateComment(this, '{{:Id}}', '{{:User.Id}}')"><i class="thumbs up violet icon"></i><span class="rating">{{:Rating}}</span></a>
                    {{/if}}
                </div>
            }
        </div>
    </div>
</template>
@if (Model.IsImage)
{
    <div class="ui basic large modal" id="post-image-modal" style="display: none">
        <div class="gallery image content">
            <div class="loader-wrapper" style="top: 45%;"><div class="ui active loader"></div></div>
            <button class="ui primary go button" onclick="location.href='/posts/showpost/' + PostGallery.getCurrentItem().Id">Перейти</button>
            <div class="prev btn" id="galleryPrevious">
                <i class="angle left icon"></i>
            </div>
            <img src="@Model.Content" class="ui centered image" />
            <div class="next btn" id="galleryNext">
                <i class="angle right icon"></i>
            </div>
        </div>
    </div>
}
<script>
    var commentsCount = @Model.CommentsCount;

    function loadPostTime(){
        var options = {
            year: 'numeric',
            day: 'numeric',
            month: 'long',
            hour: 'numeric',
            minute: 'numeric'
        };
        var dateIso = '@Model.LastEdit.ToString("o")';
        dateIso += dateIso[dateIso.length - 1] == 'Z' ? '' : 'Z';
        var date = new Date(dateIso);

        $('.post-time').html(date.toLocaleString("ru", options));
    }
    function loadCommentsCount(){
        var elem = document.getElementById('comments-count');
        elem.innerHTML = commentsCount + " " +
            ViewHelper.getWordCase(commentsCount, 'комментарий', 'комментария', 'комментариев');
    }
    var lastRateValue;
    function initComments(postId, sort) {
        return $.ajax({
            type: 'get',
            url: '/api/comments/',
            data: {
                sort: sort,
                postId: postId
            },
            success: function (data) {
                data.forEach(function(item){
                    var dateIso = item.PublicTime;
                    dateIso += dateIso[dateIso.length - 1] == 'Z' ? '' : 'Z';
                    item.PublicDateStr = ViewHelper.getPastTense(new Date(dateIso).getTime());
                });
                var tmpl = $.templates('#commentTmpl');
                var html = tmpl.render(data);
                $('#comments-wrapper').html(html);
            },
            error: function (jqXhr) {
                alert('Ошибка при инициализации комментариев!');
            }
        });
    }
    function sendComment(postId) {
        $('#comments-form').form('form validation');
        if(!$('#comments-form').form('is valid')) {
            return;
        }
        var model = {
            Content: $('#CommentContent').val(),
            PostId: postId
        };
        var replyCommentId = $('#CommentContent').data('replyComment');
        if(replyCommentId != null && replyCommentId != '') {
            model.ParentComment = {
                Id: replyCommentId
            };
        }
        $.ajax({
            type: 'post',
            url: '/api/comments/',
            data: model,
            success: function (data) {
                sendNotification('@NotificationTypes.PostComment', '@Model.User.Id');

                commentsCount++;
                loadCommentsCount();
                var tmpl = $.templates('#commentTmpl');

                var dateIso = data.PublicTime;
                dateIso += dateIso[dateIso.length - 1] == 'Z' ? '' : 'Z';
                data.PublicDateStr = ViewHelper.getPastTense(new Date(dateIso).getTime());

                var html = tmpl.render(data);
                $('#comments-wrapper').prepend(html);

                $('#com' + data.Id + ' .thumbs.up.icon').parent().popup();
            },
            error: function (jqXhr) {
                alert('Ошибка во время отправки комментария!');
            }
        });
    }
    function deleteComment(ev){
        var commentId = $(ev).data('commentId');
        var comment = $(ev).parents('.comment');

        $.ajax({
            url: '/api/comments/' + commentId,
            type: 'delete',
            success: function(data){
                commentsCount--;
                loadCommentsCount();
                $('#com' + commentId).remove();
            },
            error: function(jqXhr){
                alert('Ошибка при удалении комментария!');
            }
        });
    }
    function rateComment(ev, commentId, userId){
        var isRate = $(ev).data('isRate');
        var commentRating = $(ev).find('.rating')[0];
        var rateValue = isRate ? 0 : 1;

        $.ajax({
            type: 'put',
            url: '/api/rating',
            data: {
                CommentId: commentId,
                UserId: userId,
                Value: rateValue
            },
            success: function(resp){
                var commentRateIcon = $(ev).find('.thumbs');
                if(isRate){
                    commentRateIcon.addClass('outline');
                    commentRating.innerHTML--;
                } else{
                    commentRateIcon.removeClass('outline');
                    commentRating.innerHTML++;
                }
                $(ev).data('isRate', !isRate);
                sendNotification('@NotificationTypes.CommentRating', userId);
            },
            error: function(jqXhr){
                alert('Ошибка сервера при оценке!');
            }
        });
    }
    function loadUserGallery(){
        return $.ajax({
            type: 'post',
            url: '@Url.Action("UserGallery", "Posts")',
            data: {
                userId: '@Model.User.Id',
            },
            success: function(resp) {
                if(resp.status == undefined){
                    resp = JSON.parse(resp);
                }
                PostGallery.init({
                    currentPostId: '@Model.Id.ToString("N")',
                    posts: resp.data,
                    nextItemCall: function(item){
                        $('#post-image-modal img').attr('src', item.Content);
                        if(!item.IsLoaded){
                            $('.loader-wrapper').addClass('active');

                            $('#post-image-modal img').on('load', function(){
                                item.IsLoaded = true;
                                $('.loader-wrapper').removeClass('active');
                            });
                        }
                    },
                    previousItemCall: function(item){
                        $('#post-image-modal img').attr('src', item.Content);
                        if(!item.IsLoaded){
                            $('.loader-wrapper').addClass('active');

                            $('#post-image-modal img').on('load', function(){
                                item.IsLoaded = true;
                                $('.loader-wrapper').removeClass('active');
                            });
                        }
                    }
                });
                $('#galleryPrevious').click(function(ev){
                    PostGallery.previousItem();
                });
                $('#galleryNext').click(function(ev){
                    PostGallery.nextItem();
                });
            },
            error: function(jqXhr){
            }
        });
    }
    function addReply(userName, replyCommentId){
        $('#reply-user').html('<i class="reply icon"></i>' + userName);
        $('#reply-user').attr('href', '/User/Profile/' + userName);
        $('#remove-reply').css('display', 'inline');
        $('#CommentContent').data('replyComment', replyCommentId);
    }
    function removeReply(){
        $('#reply-user').html('');
        $('#remove-reply').css('display', 'none');
        $('#CommentContent').removeData('replyComment');
    }
    function sendNotification(notificType, targetUserId){
        $.ajax({
            url: '/api/notification',
            type: 'post',
            data: {
                NotificationType: notificType,
                User: {
                    Id: targetUserId
                }
            },
            success: function(data){
                window.hubReady.done(function(){
                    $.connection.notifyHub.server.newNotification(targetUserId, notificType);
                });
            },
            error: function(jqXhr){
                alert('Ошибка при отправке уведомления.');
            }
        });
    }
    function initRating(){
        $('.ui.rating').rating({
            onRate: function (rateValue) {
                $.ajax({
                    type: "post",
                    data: {
                        Id: $("#CurrentRating_Id").val(),
                        Value: rateValue,
                        PostId: $("#CurrentRating_PostId").val()
                    },
                    url: "/api/rating",
                    success: function (data) {
                        var currentPostRating = +$("#post-rating").data('rating');
                        var newRating = rateValue - lastRateValue;

                        var newPostRating = currentPostRating + newRating;
                        $("#post-rating").text("(" + newPostRating + ")").data('rating', currentPostRating + newRating);

                        lastRateValue = rateValue;
                        sendNotification('@NotificationTypes.PostRating', '@Model.User.Id');
                    },
                    error: function (jqXhr) {
                        alert('Ошибка инициализации рейтинга.');
                    }
                });
            }
        });
    }
    function initFormValidation(){
        $('#comments-form').form({
            fields: {
                CommentContent: {
                    rules: [
                        {
                            type: 'empty',
                            prompt: 'Вы ничего не написали'
                        }
                    ]
                }
            },
            inline: true
        });
    }
    function resizeModalImage(){
        var $modal = $('#post-image-modal');
        if($modal.length == 0){
            return;
        }
        var img = $modal.find('img')[0];
        if(img.naturalWidth > $modal.width()){
            $(img).css({
                width: '100%',
                height: '100%'
            });
        }else{
            $(img).css({
                width: '',
                height: ''
            });
        }
    }
    function initVkWidget(){
        document.getElementById('vk_share').innerHTML = VK.Share.button({
            url: '@Request.Url.AbsoluteUri',
            title: '@Model.Header',
            image: '@vkWidgetImage',
            noparse: true,
        }, {
            type: 'custom',
            text: '<span class="ui vk small compact button"><i class="vk icon"></i>Поделиться</span>'
        });
    }
    $(function () {
        initVkWidget();
        $('#post-image-modal img').on('load',function(){
            resizeModalImage();
            $("#post-image-modal").modal('refresh');
        });
        $('.modal').click(function(){
            return false;
        });
        resizeModalImage();
        loadPostTime();
        lastRateValue = $(".ui.rating").data("rating");
        initComments('@Model.Id', @((byte)SortFilter.Old)).then(function(){
            $('.thumbs.up.icon').parent().popup();
        });
        initRating();
        initFormValidation();
        @if (Model.IsImage)
        {
            <text>
        $('#post-image-modal')
            .modal({
                onShow: function(){
                    $(this).css('display', '').addClass('responsive');
                },
                onHidden: function(){
                    PostGallery.reset();
                }
            }).modal('attach events', '#post-content');
        loadUserGallery();
            </text>
        }
        $('.dimmer.modals.page').click(function(ev){
            $('#post-image-modal').modal('hide');
        });
    });
</script>