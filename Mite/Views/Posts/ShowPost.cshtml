@using Mite.Helpers
@using Mite.CodeData.Enums
@using Microsoft.AspNet.Identity
@model Mite.Models.PostModel

@{
    ViewBag.Title = Model.Header;
    ViewBag.MetaDescription = string.Format("Публикация пользователя {0} {1} | {2}", Model.User.UserName, Model.Header, Model.Description);

    var openGraphMeta = new Dictionary<string, string>
    {
        { "og:title", Model.Header },
        { "og:type", "article" },
        { "og:url", Url.Action("Index", "ShowPost", new{id = Model.Id}, "http") }
    };
    if (Model.ContentType == PostContentTypes.Image || Model.ContentType == PostContentTypes.ImageCollection)
    {
        openGraphMeta.Add("og:image", Model.Content);
    }

    var userId = User.Identity.GetUserId();
    var tagsRow = "";
    var pageUserName = Model.User.UserName;
    var currentUserName = User.Identity.Name;

    if (User.IsInRole("moder"))
    {
        tagsRow = string.Join(",", Model.Tags);
    }
}
@section meta{
    @ViewHelper.GenerateMeta(openGraphMeta)
}
@section styles{
    @Styles.Render("~/Content/lgallery")
    <style>
        .col-item:not(:last-child){
            margin-bottom: 1em;
        }
    </style>
}
<div class="ui segment grid">
    <div class="stackable two column row">
        <div class="column">
            <h2 class="ui header">
                @Model.Header
                <span class="sub header post-time"></span>
            </h2>
        </div>
        <div class="right aligned column">
            <div id="vk_share" style="display: inline-block;"></div>
            <div class="ui tiny labeled button">
                @if (Model.IsFavorite)
                {
                    <button class="ui compact small primary button" onclick="FavoritePostsApi.remove(this, '@Model.Id', '@userId')">
                        <i class="like icon"></i><span class="content">Из избранных</span>
                    </button>
                    <button class="ui compact small primary button" onclick="FavoritePostsApi.add(this, '@Model.Id', '@userId')" style="display: none">
                        <i class="like icon"></i><span class="content">В избранное</span>
                    </button>
                }
                else
                {
                    <button class="ui compact small primary button" onclick="FavoritePostsApi.add(this, '@Model.Id', '@userId')">
                        <i class="like icon"></i><span class="content">В избранное</span>
                    </button>
                    <button class="ui compact small primary button" onclick="FavoritePostsApi.remove(this, '@Model.Id', '@userId')" style="display: none">
                        <i class="like icon"></i><span class="content">Из избранных</span>
                    </button>
                }
                <span class="ui violet basic left pointing label">@Model.FavoriteCount</span>
            </div>
            @if (currentUserName == pageUserName && Model.CanEdit)
            {
                @Html.ActionLink("Редактировать", "EditPost", "Posts", new { id = Model.Id }, new { @class = "ui primary small compact button" })
            }
        </div>
    </div>
    @if (Model.Type == PostTypes.Blocked)
    {
        <div class="row">
            <div class="centered ten wide column">
                <div class="ui yellow message">
                    <div class="header">Работа заблокирована!</div>
                    <div class="content">
                        Причины блокировки могут быть следующими:
                        <ul>
                            <li>Низкое качество работы</li>
                            <li>Недопустимый контент</li>
                            <li>Нарушение чужих авторских прав</li>
                            <li>И другие...</li>
                        </ul>
                        По всем вопросам обращайтесь службу поддержки: support@mitegroup.ru
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="row">
        @if (Model.ContentType == PostContentTypes.Image)
        {
            <div data-editable class="fifteen wide centered column">
                <img src="@Model.Content" class="ui centered image" id="post-content" alt="@ViewBag.Title" />
            </div>
        }
        else if (Model.ContentType == PostContentTypes.Document)
        {
            <div data-editable class="fifteen wide centered column" id="post-content">
                @Html.Raw(Model.Content)
            </div>
        }
        else if (Model.ContentType == PostContentTypes.ImageCollection)
        {
            <div class="fifteen wide centered center aligned column col-content">
                <img src="@Model.Content" class="ui centered image" id="post-content" alt="@Model.Header" />
                <div class="ui divider"></div>
                <div class="col-content">
                    @foreach (var item in Model.Collection)
                    {
                        <div class="col-item" data-sub-html="<h3 class='ui inverted header'>@item.Description</h3>" data-src="@item.Content">
                            <h3 class="ui header">@item.Description</h3>
                            <img src="@item.Content" class="ui centered image" alt="@item.Description" />
                        </div>
                    }
                </div>
            </div>
        }
        else if (Model.ContentType == PostContentTypes.Comics)
        {
            <div class="fifteen wide centered center aligned column">
                <img src="@Model.Content" class="ui centered image" id="post-content" alt="@Model.Header" />
                <div class="ui divider"></div>
                @if (ViewHelper.IsMobileDevice(Request))
                {
                    <div class="ui three column stackable grid comics-content">
                        @foreach (var item in Model.ComicsItems.OrderBy(x => x.Page))
                        {
                            <div class="column comics-item" title="Страница @item.Page" data-src="@item.Content">
                                <img src="@item.CompressedContent" class="ui centered image" alt="Комикс @Model.Header. Страница @item.Page." />
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="ui five column stackable grid comics-content">
                        @foreach (var item in Model.ComicsItems.OrderBy(x => x.Page))
                        {
                            <div class="column comics-item" title="Страница @item.Page" data-src="@item.Content">
                                <img src="@item.CompressedContent" class="ui centered image" alt="Комикс @Model.Header. Страница @item.Page." />
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
    <div class="ui divider"></div>
    <div class="stackable row">
        <div class="twelve wide centered column">
            <div class="ui items">
                <div class="item">
                    <div class="ui tiny circular image" style="width: 80px !important">
                        <img src="@Model.User.AvatarSrc" alt="@Model.User.UserName" style="border-radius: 500rem !important;" />
                    </div>
                    <div class="content">
                        <a href="@Url.Action("Index", "UserProfile", new { name = Model.User.UserName })" class="header">&copy; @Model.User.UserName</a>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="meta">
                                <span>Оценить</span>
                                @Html.HiddenFor(x => x.CurrentRating.Id)
                                @Html.HiddenFor(x => x.CurrentRating.PostId)
                                <div class="ui star rating" data-rating="@Model.CurrentRating.Value" data-max-rating="5"></div>
                                <span id="post-rating" data-rating="@Model.Rating">(@Model.Rating)</span>
                            </div>
                        }
                        <div class="description">
                            <h4>@Model.Description</h4>
                        </div>
                        <div class="extra">
                            @foreach (var tag in Model.Tags)
                            {
                                @Html.ActionLink(tag, "Top", "Posts", new { tags = tag }, new { @class = "ui label" })
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (User.IsInRole(RoleNames.Moderator))
        {
            <div class="four wide column">
                <div class="ui form">
                    <div class="field">
                        <div class="ui fluid search multiple selection dropdown" id="select-tags">
                            <i class="dropdown icon"></i>
                            <input type="hidden" name="tags" id="Tags" />
                            <div class="default text">Теги</div>
                            <div class="menu"></div>
                        </div>
                    </div>
                    <div class="field">
                        <div class="ui blue compact floating dropdown labeled icon button" id="moderActionsDropdown">
                            <i class="wrench icon"></i>
                            <span class="text">Действия</span>
                            <div class="menu">
                                <a class="item" onclick="ModerMvc.updateTags(this, '@Model.Id')">Обновить теги</a>
                                @if (Model.Type == PostTypes.Blocked)
                                {
                                    <a class="item" onclick="ModerMvc.unblockPost(this, '@Model.Id')">Разблокировать</a>
                                }
                                else
                                {
                                    <a class="item" onclick="ModerMvc.blockPost(this, '@Model.Id')">Заблокировать</a>
                                }
                                <a class="item" onclick="RatingMvc.recount('@Model.Id', '@RatingRecountTypes.Post', this)">Пересчитать рейтинг</a>
                            </div>
                        </div>
                    </div>
                    <div class="ui error message" id="moderActionMsg"></div>
                </div>
            </div>
            <script>
                $(function () {
                    $('#moderActionsDropdown').dropdown({
                        action: 'hide'
                    });
                    TagsApi.loadDropdown('#select-tags', '@tagsRow'.split(','));
                });
            </script>
        }
    </div>
    <div class="ui divider"></div>
    <div class="row">
        <div class="twelve wide computer twelve wide tablet sixteen wide mobile centered column">
            <div class="ui large comments">
                <h4 class="ui header" id="comments-count">
                    @Model.CommentsCount @ViewHelper.GetWordCase(Model.CommentsCount, "комментарий", "комментария", "комментариев")
                </h4>
                @if (User.Identity.IsAuthenticated)
                {
                    <form class="ui form" id="comments-form">
                        <div class="field">
                            <textarea name="CommentContent" id="CommentContent" rows="3" data-reply-user-id data-reply-comment></textarea>
                        </div>
                        <button type="button" class="ui primary small right labeled icon button" onclick="sendComment('@Model.Id')">
                            Комментировать<i class="icon write"></i>
                        </button>
                        <a href="" id="reply-user"></a>
                        <i id="remove-reply" class="remove red icon" style="display: none; cursor: pointer" onclick="removeReply()"></i>
                        <div class="ui error message"></div>
                    </form>
                }
                else
                {
                    @Html.ActionLink("Зарегистрируйтесь, чтобы оставлять комментарии.", "Register", "Account")
                }
                <div class="ui comments" id="comments-wrapper">
                    <div class="active dot-loader" style="position: relative; transform: initial;">
                        <div class="dot"></div>
                        <div class="dot"></div>
                        <div class="dot"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script id="commentTmpl" type="text/x-jsrender">
    <div class="comment" id="com{{:Id}}" data-reply-user-id="{{:User.Id}}">
        <a class="ui circular avatar image">
            <img src="{{:User.AvatarSrc}}" alt="{{:User.UserName}}" />
        </a>
        <div class="content">
            <a href="/user/profile/{{:User.UserName}}" class="author">{{:User.UserName}}</a>
            <div class="metadata">
                {{if ParentComment != null}}
                <i class="violet share icon"></i>{{:ParentComment.User.UserName}} |
                {{/if}}
                <span class="date">{{:PublicDateStr}}</span>
            </div>
            <div class="text">{{:Content}}</div>
            @if (User.Identity.IsAuthenticated)
            {
                <div class="actions">
                    <a onclick="addReply('{{:User.UserName}}', '{{:Id}}', '{{:User.Id}}')">Ответить</a>
                    {{if User.Id == '@User.Identity.GetUserId()'}}
                    <a data-comment-id="{{:Id}}" onclick="deleteComment(this)">Удалить</a>
                    {{/if}}
                    {{if CurrentRating == null || CurrentRating.Value == 0}}
                    <a data-is-rate="false" title="Нравится!" onclick="RatingMvc.rateComment(this, '{{:Id}}', '{{:User.Id}}', '@NotificationTypes.CommentRating', '@Model.Id')"><i class="thumbs outline up violet icon"></i><span class="rating">{{:Rating}}</span></a>
                    {{else}}
                    <a data-is-rate="true" title="Нравится!" onclick="RatingMvc.rateComment(this, '{{:Id}}', '{{:User.Id}}', '@NotificationTypes.CommentRating', '@Model.Id')"><i class="thumbs up violet icon"></i><span class="rating">{{:Rating}}</span></a>
                    {{/if}}
                </div>
            }
        </div>
    </div>
</script>
@Scripts.Render("~/bundles/scroll", "~/bundles/gallery", "~/bundles/api", "~/bundles/grid")
<script>
    var commentsCount = @Model.CommentsCount;
    var isImage = @((Model.ContentType == PostContentTypes.Image).ToString().ToLower());
    var isComics = @((Model.ContentType == PostContentTypes.Comics).ToString().ToLower());
    var isCollection = @((Model.ContentType == PostContentTypes.ImageCollection).ToString().ToLower());

    function loadPostTime(){
        var dateIso = '@Model.LastEdit.ToString("o")';
        dateIso += dateIso[dateIso.length - 1] == 'Z' ? '' : 'Z';
        var date = new Date(dateIso);

        $('.post-time').html(DateTimeHelper.toDateString(date, 'long', true) + ',' + DateTimeHelper.toTimeString(date));
    }
    function loadCommentsCount(){
        var elem = document.getElementById('comments-count');
        elem.innerHTML = commentsCount + " " +
            ViewHelper.getWordCase(commentsCount, 'комментарий', 'комментария', 'комментариев');
    }
    var lastRateValue;
    function initComments(postId, sort) {
        return $.ajax({
            type: 'get',
            url: '/api/comments/',
            data: {
                sort: sort,
                postId: postId
            },
            success: function (data) {
                data.forEach(function(item){
                    var dateIso = item.PublicTime;
                    dateIso += dateIso[dateIso.length - 1] == 'Z' ? '' : 'Z';
                    item.PublicDateStr = ViewHelper.getPastTense(new Date(dateIso).getTime());
                });
                var tmpl = $.templates('#commentTmpl');
                var html = tmpl.render(data);
                $('#comments-wrapper').html(html);
                scrollToComment();
            },
            error: function (jqXhr) {
                iziToast.error({
                    title: 'Упс!',
                    message: 'Комментарии не загружены.'
                });
            }
        });
    }
    function sendComment(postId) {
        if (!$('#comments-form').form('form validation')) {
            return;
        }
        var commentContent = $('#CommentContent'),
            model = {
                Content: commentContent.val(),
                PostId: postId
            };
        var replyCommentId = commentContent.data('replyComment');
        if(replyCommentId != null && replyCommentId != '') {
            model.ParentComment = {
                Id: replyCommentId,
                User: {
                    Id: commentContent.data('replyUserId')
                }
            };
        }
        $.ajax({
            type: 'post',
            url: '/api/comments/',
            data: model,
            success: function (data) {
                sendNotification('@NotificationTypes.PostComment', '@Model.User.Id', '@Model.Id#com' + data.Id);
                if(replyCommentId != null && replyCommentId != '') {
                    sendNotification('@NotificationTypes.CommentReply', model.ParentComment.User.Id, '@Model.Id#com' + data.Id);
                }
                commentsCount++;
                loadCommentsCount();
                var tmpl = $.templates('#commentTmpl');

                var dateIso = data.PublicTime;
                dateIso += dateIso[dateIso.length - 1] == 'Z' ? '' : 'Z';
                data.PublicDateStr = ViewHelper.getPastTense(new Date(dateIso).getTime());

                var html = tmpl.render(data);
                $('#comments-wrapper').prepend(html);
            },
            error: function (jqXhr) {
                var errors = [];
                if (jqXhr.status === 400) {
                    var resp = jqXhr.responseJSON;
                    for (var key in resp.ModelState) {
                        resp.ModelState[key].forEach(function (val) {
                            errors.push(val);
                        });
                    }
                } else {
                    errors.push('Внутренняя ошибка');
                }
                $('#comments-form').form('add errors', errors);
            }
        });
    }
    function deleteComment(ev){
        var commentId = $(ev).data('commentId');
        var comment = $(ev).parents('.comment');

        $.ajax({
            url: '/api/comments/' + commentId,
            type: 'delete',
            success: function(data){
                commentsCount--;
                loadCommentsCount();
                $('#com' + commentId).remove();
            },
            error: function (jqXhr) {
                iziToast.error({
                    title: 'Упс!',
                    message: 'Ошибка при удалении комментария.'
                });
            }
        });
    }
    function loadUserGallery(){
        return $.ajax({
            url: '@Url.Action("UserGallery", "Posts")',
            data: {
                userId: '@Model.User.Id',
                postId: '@Model.Id'
            },
            success: function(resp) {
                if(resp.status == undefined){
                    resp = JSON.parse(resp);
                }
                MiteGallery.init(resp.data.Items, resp.data.InitialIndex, '/posts/showpost/', $('#post-content'));
            }
        });
    }
    function addReply(userName, replyCommentId, replyUserId){
        $('#reply-user').attr('href', '/User/Profile/' + userName)
            .html('<i class="reply icon"></i>' + userName);
        $('#remove-reply').show();
        $('#CommentContent').data('replyComment', replyCommentId)
            .data('replyUserId', replyUserId);
    }
    function removeReply(){
        $('#reply-user').html('');
        $('#remove-reply').hide();
        $('#CommentContent').removeData('replyComment')
            .removeData('replyUserId');
    }
    function sendNotification(notificType, targetUserId, sourceValue){
        $.ajax({
            url: '/api/notification',
            type: 'post',
            data: {
                NotificationType: notificType,
                User: {
                    Id: targetUserId
                },
                SourceValue: sourceValue
            },
            success: function(data){
                window.hubReady.done(function(){
                    $.connection.notifyHub.server.newNotification(targetUserId, notificType, sourceValue);
                });
            },
            error: function (jqXhr) {
                iziToast.error({
                    title: 'Упс!',
                    message: 'Ошибка при отправке уведомления.'
                });
            }
        });
    }
    function initRating(){
        $('.ui.rating').rating({
            onRate: function (rateValue) {
                RatingMvc.ratePost(rateValue, '@NotificationTypes.PostRating', '@Model.User.Id', '@Model.Id');
            }
        });
    }
    function initFormValidation(){
        $('#comments-form').form({
            fields: {
                CommentContent: {
                    rules: [
                        {
                            type: 'empty',
                            prompt: 'Вы ничего не написали'
                        }
                    ]
                }
            }
        });
    }
    function initVkWidget(){
        document.getElementById('vk_share').innerHTML = VK.Share.button({
            url: '@Request.Url.AbsoluteUri',
            title: '@Model.Header',
            noparse: false,
        }, {
            type: 'custom',
            text: '<span class="ui vk small compact button"><i class="vk icon"></i>Поделиться</span>'
        });
    }
    function scrollToComment(){
        if(location.hash == ''){
            return;
        }
        $(window).scrollTo(location.hash, 2200, {
            easing: 'easeOutExpo',
            offset: 20
        });
    }
    $(function () {
        $('.modal').click(function(){
            return false;
        });
        loadPostTime();
        lastRateValue = $(".ui.rating").data("rating");
        initComments('@Model.Id', @((byte)SortFilter.Old));
        initRating();
        initFormValidation();
        if (isImage) {
            loadUserGallery();
        } else if (isCollection) {
            loadUserGallery();
            MiteGallery.initCollection('.col-content');
        } else if (isComics) {
            loadUserGallery();
            MiteGallery.initComics('.comics-content');
        }
        initVkWidget();
    });
</script>