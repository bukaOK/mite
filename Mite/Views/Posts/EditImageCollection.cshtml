@using Mite.CodeData.Enums
@using Mite.Extensions
@model Mite.Models.ImagePostModel
@{
    var tagsRow = Model.Tags == null ? string.Empty : string.Join(",", Model.Tags);
    var saveMode = Model.Header == null ? "add" : "edit";
    var isPublished = Model.IsPublished.ToString().ToLower();
}
@section styles{
    <style>
        .p-item-form .close.icon {
            float: left;
        }
        #wmEdit:not(.active), #productEdit:not(.active) {
            display: none;
        }
        .dashed.drop-zone.segment {
            text-align: center;
        }
        input[type="file"] {
            display: none;
        }
    </style>
}
<div class="ui segment">
    <div class="ui dividing header">@ViewBag.Title</div>
    <form class="ui two column stackable center aligned grid form p-form">
        <div class="column">
            <label class="ui dashed drop-zone segment" ondragover="FileReaderHelper.dragOverHandler(event)" ondrop="FileReaderHelper.dropHandler(event)">
                <span class="ui small blue header"><i class="cloud download icon"></i>Перетащите или нажмите</span>
                <input type="file" onchange="FileReaderHelper.inputDownloadHandler(event)" style="display: none" />
            </label>
            <div class="field">
                <div class="ui image img-wrapper" id="img-wrapper">
                    @if (!string.IsNullOrEmpty(Model.Content))
                    {
                        <img src="@Model.Content" />
                    }
                </div>
            </div>
        </div>
        <div class="left aligned column">
            @Html.HiddenFor(x => x.Id)
            @Html.EditorFor(x => x.Header)
            @Html.HiddenFor(x => x.Content)
            @Html.EditorFor(x => x.Description)
            <div class="field">
                <div class="ui fluid search multiple selection dropdown" id="select-tags">
                    <i class="dropdown icon"></i>
                    @Html.HiddenFor(x => x.Tags, new { Value = tagsRow })
                    <div class="default text">Теги</div>
                    <div class="menu">
                        @foreach (var tagName in Model.AvailableTags)
                        {
                            <div class="item" data-value="@tagName">@tagName</div>
                        }
                    </div>
                </div>
            </div>
            @if (Model.WatermarkId != null)
            {
                <button type="button" class="ui margined red button" id="removeWatBtn">Удалить водяной знак</button>
                <div class="ui toggle checkbox" id="WmNeedCheck" style="display: none">
                    <input type="checkbox" name="WmNeed" autocomplete="off" checked />
                    <label>Водяной знак</label>
                </div>
            }
            else
            {
                <div class="ui toggle checkbox" id="WmNeedCheck">
                    <input type="checkbox" name="WmNeed" autocomplete="off" />
                    <label>Водяной знак</label>
                </div>
            }
            <div id="wmEdit">
                @Html.EditorFor(x => x.UseWatermarkForCols)
                @{ Html.RenderAction("Edit", "Watermark", new { id = Model.WatermarkId }); }
            </div>
            <br />
            <div class="ui toggle checkbox" id="ProdNeedCheck">
                <input type="checkbox" name="ProdNeed" autocomplete="off" @Html.Raw(Model.ProductId == null ? "" : "checked") />
                <label>Товар</label>
            </div>
            @{ Html.RenderAction("Edit", "Products", new { id = Model.ProductId }); }
            <div class="ui error message"></div>
        </div>
    </form>
    <div class="ui one column grid">
        <div class="center aligned column">
            <div class="collection-items">
                @if (Model.Collection != null && Model.Collection.Count > 0)
                {
                    foreach (var colItem in Model.Collection)
                    {
                        <form class="ui form p-item-form" data-id="@colItem.Id">
                            <div class="ui divider"></div>
                            <i title="Удалить" onclick="Posts.removeCollectionItem(this)" class="red link large close icon"></i>
                            <div class="ui two column stackable center aligned grid">
                                <div class="column">
                                    <label class="ui dashed drop-zone segment" ondragover="FileReaderHelper.dragOverHandler(event)" ondrop="FileReaderHelper.dropHandler(event)">
                                        <span class="ui small blue header"><i class="cloud download icon"></i>Перетащите или нажмите</span>
                                        <input type="file" onchange="FileReaderHelper.inputDownloadHandler(event)" style="display: none" />
                                    </label>
                                    <div class="field">
                                        <div class="ui image img-wrapper">
                                            <img src="@colItem.Content" />
                                        </div>
                                    </div>
                                </div>
                                <div class="left aligned column">
                                    <input type="hidden" name="Content" value="@colItem.Content" />
                                    <div class="field">
                                        <label>Описание</label>
                                        <textarea rows="2" placeholder="Описание" name="Description">@colItem.Description</textarea>
                                    </div>
                                    <div class="ui error message"></div>
                                </div>
                            </div>
                        </form>
                    }
                }
            </div>
            <button class="ui primary button" style="margin-top: 10px" onclick="Posts.addCollectionItem()">Добавить элемент коллекции</button>
            <button class="ui green button" onclick="Posts.Api.saveCollection(this, '@saveMode', 'imagecol', @isPublished)">Сохранить</button>
        </div>
    </div>
</div>
<div class="ui tiny modal" role="dialog" id="publishConfirmModal">
    <i class="close icon"></i>
    <div class="header" role="heading">Опубликовать работу?</div>
    <div class="content" role="document">
        <p>
            После публикации работу можно будет отредактировать в течение трёх дней. 
            При нажатии "Нет" она сохранится в черновиках и будет доступна для изменений в любое время.
        </p>
    </div>
    <div class="actions">
        <div class="ui ok green button">Да</div>
        <div class="ui cancel red button">Нет</div>
    </div>
</div>
<script type="text/html" id="postItemFormTmpl">
    <form class="ui form p-item-form">
        <div class="ui divider"></div>
        <i title="Удалить" onclick="Posts.removeCollectionItem(this)" class="red link large close icon"></i>
        <div class="ui two column stackable center aligned grid">
            <div class="column">
                <label class="ui dashed drop-zone segment" ondragover="FileReaderHelper.dragOverHandler(event)" ondrop="FileReaderHelper.dropHandler(event)">
                    <span class="ui small blue header"><i class="cloud download icon"></i>Перетащите или нажмите</span>
                    <input type="file" onchange="FileReaderHelper.inputDownloadHandler(event)" style="display: none" />
                </label>
                <div class="field">
                    <div class="ui image img-wrapper"></div>
                </div>
            </div>
            <div class="left aligned column">
                <input type="hidden" name="Content" />
                <div class="field">
                    <textarea rows="2" placeholder="Описание" name="Description"></textarea>
                </div>
                <div class="ui error message"></div>
            </div>
        </div>
    </form>
</script>
@section scripts{
    @Scripts.Render("~/bundles/api")
<script>
    $(function () {
        @Html.Raw(Html.FormValidation<Mite.Models.ImagePostModel>(".p-form"))
        $('.p-item-form').form({
            fields: {
                Description: {
                    rules: [
                        {
                            type: 'empty',
                            prompt: 'Заполните описание элемента'
                        },
                        {
                            type: 'maxLength[300]',
                            prompt: 'Слишком длинное описание'
                        }
                    ]
                },
                Content: {
                    rules: [
                        {
                            type: 'empty',
                            prompt: 'Вы не выбрали изображение'
                        }
                    ]
                }
            }
        });
        $('#UseWatermarkForCols').parent().checkbox();
        $('#WmNeedCheck').checkbox({
            onChange: function () {
                $('#wmEdit').toggleClass('active');
            }
        });
        $('#ProdNeedCheck').checkbox({
            onChange: function () {
                $('#productEdit').toggleClass('active');
            }
        });
        $('#select-tags').dropdown({
            allowAdditions: true,
            fullTextSearch: true,
            keys: {
                delimiter: 13
            },
            match: 'text',
            forceSelection: false
        });

    });
</script>
}


