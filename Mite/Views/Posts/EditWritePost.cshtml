@using Mite.CodeData.Enums
@using Mite.Extensions
@model Mite.Models.WritingPostModel

@{
    var tagsRow = Model.Tags == null ? string.Empty : string.Join(",", Model.Tags);
    var isEdit = !string.IsNullOrEmpty(Model.Header);
}
@Scripts.Render("~/bundles/editor")
<div class="ui edit post segment">
    <h2 class="ui dividing header">@ViewBag.Title</h2>
    <div class="ui center aligned grid" style="margin-bottom: 0">
        <div class="row">
            <div class="column">
                <label for="wrapperImg" class="ui labeled centered margined icon primary button">
                    Добавить обложку
                    <i class="cloud download icon"></i>
                </label>
                <button class="ui centered margined red button" onclick="removeCover()">
                    Удалить обложку
                </button>
            </div>
        </div>
        @if (string.IsNullOrEmpty(Model.Cover))
        {
            <div class="row" style="display: none">
                <div class="ten wide column" id="img-wrapper"></div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="ten wide column" id="img-wrapper">
                    <img src="@Model.Cover" alt="@Model.Header" style="max-width: 100%" />
                </div>
            </div>
        }
    </div>
    @using (Html.BeginForm("AddPost", "Posts", FormMethod.Post, new { @class = "ui form", id = "writeEditForm" }))
    {
        <div class="field">
            @Html.TextBoxFor(x => x.Header, new { placeholder = Html.DisplayNameFor(x => x.Header), oninput = "onHeaderInput(this)"})
        </div>
        @Html.HiddenFor(x => x.Cover)
        <input type="file" id="wrapperImg" style="display: none"/>
        <div class="two fields">
            <div class="field">
                @Html.TextAreaFor(x => x.Description, new { @placeholder = Html.DisplayNameFor(y => y.Description) })
                <div class="ui error message"></div>
            </div>
            <div class="field">
                <div class="ui fluid search multiple selection dropdown" id="select-tags">
                    @Html.HiddenFor(x => x.Tags, new { Value = tagsRow })
                    <div class="default text">Теги</div>
                    <div class="menu">
                        @foreach (var tagName in Model.AvailableTags)
                        {
                            <div class="item" data-value="@tagName">@tagName</div>
                        }
                    </div>
                </div>
                <div class="ui blue icon message">
                    <i class="info icon"></i>
                    <div class="content">
                        <div class="header">
                            Внимание!
                        </div>
                        <p>
                            Вы также можете добавлять другие тематические теги, 
                            <b>не включенные в список сервиса</b> (теги, содержащие названия, бренды и пр., будут удаляться).
                        </p>
                    </div>
                </div>
            </div>
        </div>
        if (Model.Header == null)
        {
            <h2 id="title">@Html.DisplayNameFor(x => x.Header)</h2>
        }
        else
        {
            <h2 id="title">@Model.Header</h2>
        }
        <div style="clear: both" data-editable data-name="@Html.NameFor(x => x.Content)">
            @if (string.IsNullOrEmpty(Model.Content))
            {
                <p id="initial-content"></p>
            }
            else
            {
                @Html.Raw(Model.Content)
            }
        </div>
    }
</div>
<div class="ui small modal" id="saveModal">
    <i class="close icon"></i>
    <div class="header">
        Опубликовать работу?
    </div>
    <div class="content">
        После публикации работу можно будет отредактировать в течение трёх дней.
        При нажатии "Нет" она сохранится в черновиках и будет доступна для изменений в любое время
    </div>
    <div class="actions">
        <button class="ui red cancel button">Нет, просто сохранить</button>
        <button class="ui green ok button">Да</button>
    </div>
</div>
<script>
    function initEditPopup(){
        var $editBtn = $('.ct-ignition__button--edit');
        $editBtn.popup({
            on: 'manual',
            position: 'right center',
            content: 'Нажми на меня!'
        });
        $editBtn.popup('show');
        $editBtn.click(function(ev){
            $editBtn.popup('hide');
            $.ajax({
                url: '@Url.Action("InitHelper", "UserHelpers")',
                data: {
                    helperType: '@HelperTypes.EditDocBtn'
                }
            });
        });
    }
    function onHeaderInput(headerInput) {
        document.getElementById('title').innerText = headerInput.value;
    }
    function removeCover(){
        $('#Cover').val('');
        $('#img-wrapper').html('');
        $('#img-wrapper').parent('.row').hide();
    }
    function articleImageUploader(dialog) {
        var image;
        dialog.addEventListener('imageuploader.fileready', function (ev) {
            var reader = new FileReader();
            image = new Image();
            var file = ev.detail().file;
            reader.onload = function () {
                image.src = reader.result;
            }
            image.onload = function () {
                this.size = [this.width, this.height];
                dialog.populate(this.src, this.size);
            };
            reader.readAsDataURL(file);
            image.src = window.URL.createObjectURL(file);
        });
        dialog.addEventListener('imageuploader.cancelupload', function () {
            dialog.state('empty');
        });
        dialog.addEventListener('imageuploader.clear', function () {
            dialog.clear();
            image = null;
        });
        dialog.addEventListener('imageuploader.save', function () {
            var crop, cropRegion, formData;

            dialog.save(image.src, image.size, {
                'data-ce-max-width': image.size[0]
            });
        });
    }
    function readImage(file, evt) {
        var reader = new FileReader();
        reader.onload = function () {
            $('#img-wrapper').html('<img src="' + reader.result + '" style="max-width: 100%"/>');
            $('#img-wrapper').parent('.row').show();
            $('#Cover').val(reader.result);
        }
        isCoverLarge = file.size / 1024 / 1024 > 20;
        reader.readAsDataURL(file);
    }
    function inputDownloadHandler(evt) {
        var file = evt.target.files[0];
        readImage(file, evt);
    }
    function savePost(isPublished, editorInstance) {
        @{
            var url = string.IsNullOrEmpty(Model.Header)
                ? "/posts/addpost"
                : "/posts/updatepost";
        }
        if(isPublished){
            formData.PublishDate = new Date().toISOString();
        }
        editorInstance.busy(true);
        $.ajax({
            data: formData,
            type: 'post',
            url: '@url',
            success: function (resp) {
                if(resp.status == undefined){
                    resp = JSON.parse(resp);
                }
                var validErrorStatus = @((byte)Mite.Core.JsonStatuses.ValidationError);
                if(resp.status == validErrorStatus){
                    $('#writeEditForm').form('add errors', resp.data);
                    iziToast.error({
                        title: 'Упс!',
                        message: 'Ошибка при сохранении, подрбности в форме.'
                    });
                } else{
                    if(isPublished){
                        location.href = '/user/profile/@User.Identity.Name#posts/published';
                    } else{
                        location.href = '/user/profile/@User.Identity.Name#posts/drafts';
                    }
                }
            },
            error: function (jqXhr) {
                $('.ct-ignition__button--edit').css('background', '#e74c3c');
                iziToast.error({
                    title: 'Упс!',
                    message: 'Ошибка при сохранении.'
                });
            },
            complete: function (jqXhr) {
                editorInstance.busy(false);
            }
        });
    }
    var isCoverLarge = false,
        postId = '@Model.Id',
        defaultId = '@Guid.Empty',
        formData;

    ContentTools.DEFAULT_TOOLS = [
        [
            'bold',
            'italic',
            'image'
        ], [
            'align-left',
            'align-center',
            'align-right'
        ],
        [
            'heading',
            'subheading',
            'paragraph',
            'unordered-list',
            'ordered-list',
            'table',
            'indent',
            'unindent',
            'line-break'
        ], [
            'undo',
            'redo',
            'remove'
        ]
    ];
    ContentTools.StylePalette.add([
        new ContentTools.Style('Описание', 'description', ['h3'])
    ]);
    ContentTools.Tools.Heading.tagName = "h2";
    ContentTools.Tools.Subheading.tagName = "h3";
    $.getJSON('/bower_components/ContentTools/translations/ru.json', function (data) {
        ContentEdit.addTranslations('ru', data);
        ContentEdit.LANGUAGE = 'ru';
    });
    ContentTools.IMAGE_UPLOADER = articleImageUploader;

    ContentTools.ToolboxUI.prototype.mount = function () {
        var coord, position, restore;
        this._domElement = this.constructor.createDiv(['ct-widget', 'ct-toolbox']);
        this.parent().domElement().appendChild(this._domElement);
        this._domGrip = this.constructor.createDiv(['ct-toolbox__grip', 'ct-grip']);
        this._domElement.appendChild(this._domGrip);
        this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
        this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
        this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
        this._domToolGroups = this.constructor.createDiv(['ct-tool-groups']);
        this._domElement.appendChild(this._domToolGroups);
        this.tools(this._tools);
        restore = window.localStorage.getItem('ct-toolbox-position');
        if (restore && /^\d+,\d+$/.test(restore)) {
            position = (function () {
                var _i, _len, _ref, _results;
                _ref = restore.split(',');
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    coord = _ref[_i];
                    _results.push(parseInt(coord));
                }
                return _results;
            })();
            this._domElement.style.left = "" + position[0] + "px";
            this._domElement.style.top = "" + position[1] + "px";
            this._contain();
        }
        var self = this;
        $(this._domElement).pep({
            initiate: function () {
                self.addCSSClass('ct-toolbox--dragging');
            },
            stop: function () {
                self.removeCSSClass('ct-toolbox--dragging');
            },
            elementsWithInteraction: '.ct-tool-groups'
        });
        $(this._domElement).css('position', 'fixed');
        return this._addDOMEventListeners();
    };
    $(function () {
        ViewHelper.activateSidebarItem('#editDocItem');
        ViewHelper.disableFormSubmitting('#writeEditForm');
        $('#select-tags').dropdown({
            allowAdditions: true,
            fullTextSearch: true,
            keys: {
                delimiter: 13
            },
            showOnFocus: false,
            forceSelection: false,
            match: 'text'
        });

        @Html.Raw(Html.FormValidation<Mite.Models.WritingPostModel>("#writeEditForm"))
        var editor = ContentTools.EditorApp.get();

        editor.init('*[data-editable]', 'data-name');
        $('#initial-content').popup({
            content: 'Нажмите сюда, чтобы начать!',
        });

        editor.inspector().show = function () { return false; }
        editor.addEventListener('saved',
            function (ev) {
                if (!$('#writeEditForm').form('validate form')) {
                    return false;
                }
                var isEditMode = @isEdit.ToString().ToLower();
                var content = ev.detail().regions.Content;
                if (isCoverLarge) {
                    alert('Обложка не может иметь размер больше 10 мбайт.');
                    return false;
                }
                if (content === '' || (!isEditMode && content === undefined)) {
                    $('#writeEditForm').form('add errors', ['Заполните контент.'])
                    iziToast.error({
                        title: 'Упс!',
                        message: 'Заполните контент.'
                    });
                    return false;
                }
                formData = {
                    Content: content,
                    Header: $('#Header').val(),
                    Description: $('#Description').val(),
                    Id: '@Model.Id',
                    ContentType: '@PostContentTypes.Document',
                    Tags: $('#Tags').val().split(','),
                    Cover: $('#Cover').val()
                };
                var isPublished = @Model.IsPublished.ToString().ToLower();
                if(isPublished){
                    savePost(true, editor);
                } else{
                    $('#saveModal').modal('show');
                }
            });
        $("#saveModal").modal({
            onDeny: function(){
                savePost(false, editor);
            },
            onApprove: function(){
                savePost(true, editor);
            }
        });
        var wrapperInput = document.getElementById("wrapperImg");
        wrapperInput.onchange = inputDownloadHandler;
        @if (!Model.Helper.EditDocBtn)
        {
            <text>initEditPopup();</text>
        }
    });
</script>