@using Mite.Enums;
@model Mite.Models.WritingPostModel

@{
    var tagsRow = Model.Tags == null ? string.Empty : string.Join(",", Model.Tags);
}
@Scripts.Render("~/bundles/editor")
<div class="ui edit post segment">
    <h2 class="ui dividing header">@ViewBag.Title</h2>
    @using (Html.BeginForm("AddPost", "Posts", FormMethod.Post, new { @class = "ui form" }))
    {
        @Html.EditorFor(x => x.Header)
        <div class="two fields">
            <div class="field">
                @Html.TextAreaFor(x => x.Description, new {@placeholder = Html.DisplayNameFor(y => y.Description) })
            </div>
            <div class="field">
                <div class="ui fluid search multiple selection dropdown" id="select-tags">
                    @Html.HiddenFor(x => x.Tags, new { Value = tagsRow })
                    <div class="default text">Теги</div>
                    <div class="menu">
                    </div>
                </div>
            </div>
        </div>
        if (Model.Header == null)
        {
            <h2>@Html.DisplayNameFor(x => x.Header)</h2>
        }
        else
        {
            <h2>@Model.Header</h2>
        }
        <div style="clear: both" data-editable data-name="@Html.NameFor(x => x.Content)">
            @Html.Raw(Model.Content)
        </div>
    }
</div>
<div class="ui small modal">
    <i class="close icon"></i>
    <div class="header">
        Вы уверены?
    </div>
    <div class="content">
        После публикации работу невозможно будет редактировать. 
        При нажатии "Нет" она сохранится в черновиках и будет доступна для изменений.
    </div>
    <div class="actions">
        <button class="ui red cancel button">Нет, просто сохранить</button>
        <button class="ui green ok button">Да</button>
    </div>
</div>
<script>
    var postId = '@Model.Id';
    var defaultId = '@Guid.Empty';
    ContentTools.DEFAULT_TOOLS = [
        ['bold', 'italic', 'line-break'],
        [
            'heading', 'subheading', 'paragraph',
            'align-left', 'align-center', 'align-right'
        ],
        ['undo', 'redo', 'remove']
    ];

    ContentTools.StylePalette.add([
        new ContentTools.Style('Описание', 'description', ['h3'])
    ]);
    ContentTools.Tools.Heading.tagName = "h2";
    ContentTools.Tools.Subheading.tagName = "h3";
    $.ajax({
        type: 'get',
        url: '/bower_components/ContentTools/translations/ru.json',
        success: function (data) {
            ContentEdit.addTranslations('ru', data);
            ContentEdit.LANGUAGE = 'ru';
        }
    });
    ContentTools.ToolboxUI.prototype.mount = function () {
        var coord, position, restore;
        this._domElement = this.constructor.createDiv(['ct-widget', 'ct-toolbox']);
        this.parent().domElement().appendChild(this._domElement);
        this._domGrip = this.constructor.createDiv(['ct-toolbox__grip', 'ct-grip']);
        this._domElement.appendChild(this._domGrip);
        this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
        this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
        this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
        this._domToolGroups = this.constructor.createDiv(['ct-tool-groups']);
        this._domElement.appendChild(this._domToolGroups);
        this.tools(this._tools);
        restore = window.localStorage.getItem('ct-toolbox-position');
        if (restore && /^\d+,\d+$/.test(restore)) {
            position = (function () {
                var _i, _len, _ref, _results;
                _ref = restore.split(',');
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    coord = _ref[_i];
                    _results.push(parseInt(coord));
                }
                return _results;
            })();
            this._domElement.style.left = "" + position[0] + "px";
            this._domElement.style.top = "" + position[1] + "px";
            this._contain();
        }
        var self = this;
        $(this._domElement).pep({
            initiate: function () {
                self.addCSSClass('ct-toolbox--dragging');
            },
            stop: function(){
                self.removeCSSClass('ct-toolbox--dragging');
            },
            elementsWithInteraction: '.ct-tool-groups'
        });
        return this._addDOMEventListeners();
    };

    $(function () {
        ViewHelper.activateSidebarItem('#editDocItem');
        var headerId = '#@Html.IdFor(x => x.Header)';

        $(headerId).keyup(function (ev) {
            $('.ui.form').children('h2').html(ev.target.value);
        });
        $('form').form({
            inline: true,
            fields: {
                Header: {
                    rules: [
                        {
                            type: 'empty',
                            prompt: $('#Header').data('valRequired')
                        }
                    ]
                },
                Description: {
                    rules: [
                        {
                            type: 'maxLength[' + $('#Description').data('val-maxlength-max') + ']',
                            prompt: $('#Description').data('val-maxlength')
                        }
                    ]
                }
            }
        });
        $.ajax({
            url: '/api/tags',
            type: 'get',
            success: function(data){
                var tagsMenu = $('#select-tags');
                var tagsItems = '';
                for(var i = 0; i < data.length; i++){
                    tagsItems += '<div class="item" data-value="' + data[i] + '">' + data[i] + '</div>'
                }
                tagsMenu.children('.menu').html(tagsItems);
                tagsMenu.dropdown({
                    allowAdditions: true,
                    keys: {
                        delimiter: false
                    },
                    showOnFocus: false,
                    match: 'text',
                    forceSelection: false
                });
            },
            error: function(jqXhr){
                alert('Ошибка инициализации тегов.');
            }
        });
        @{
            var url = string.IsNullOrEmpty(Model.Header)
                ? Url.Action("AddPost", "Posts")
                : Url.Action("UpdatePost", "Posts");
        }
        var editor = ContentTools.EditorApp.get();

        editor.init('*[data-editable]', 'data-name');
        editor.inspector().show = function () { return false; }
        editor.addEventListener('saved',
            function(ev) {
                if(!$('form').form('is valid')){
                    $('.ct-ignition__button--edit').css('background', '#e74c3c');
                    return false;
                }
                var content = ev.detail().regions.Content;
                if (content == '' || content == null || content == undefined) {
                    alert('Контент не может быть пустым!');
                    return false;
                }
                this.busy(true);
                $.ajax({
                    data: {
                        Content: content,
                        Header: $(headerId).val(),
                        Description: $('#Description').val(),
                        Id: '@Model.Id',
                        IsImage: false,
                        Tags: $('#Tags').val().split(','),
                        IsPublished: false
                    },
                    type: 'post',
                    url: '@url',
                    success: function(data){
                        $('.ct-ignition__button--edit').css('background', '#27ae60');
                    },
                    error: function(jqXhr){
                        $('.ct-ignition__button--edit').css('background', '#e74c3c');
                        alert('Ошибка при сохранении');
                    },
                    complete: function(jqXhr){
                        editor.busy(false);
                    }
                });
            });
    });
</script>