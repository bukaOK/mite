@using Mite.CodeData.Enums
@using Mite.Extensions
@model Mite.Models.WritingPostModel

@{
    var tagsRow = Model.Tags == null ? string.Empty : string.Join(",", Model.Tags);
    var isEdit = !string.IsNullOrEmpty(Model.Header);
    var charsRow = Model.Characters == null ? string.Empty : string.Join(",", Model.Characters);
    var saveUrl = isEdit ? "/posts/updatepost" : "/posts/addpost";
}
<div class="ui edit post segment">
    <h2 class="ui dividing header">@ViewBag.Title</h2>
    <div class="ui center aligned grid" style="margin-bottom: 0">
        <div class="row">
            <div class="column">
                <label for="wrapperImg" class="ui labeled centered margined icon primary button">
                    Добавить обложку
                    <i class="cloud download icon"></i>
                </label>
                <button class="ui centered margined red button" onclick="removeCover()">
                    Удалить обложку
                </button>
            </div>
        </div>
        @if (string.IsNullOrEmpty(Model.Cover))
        {
            <div class="row" style="display: none">
                <div class="ten wide column" id="img-wrapper"></div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="ten wide column" id="img-wrapper">
                    <img src="@Model.Cover" alt="@Model.Header" style="max-width: 100%" />
                </div>
            </div>
        }
    </div>
    @using (Html.BeginForm("AddPost", "Posts", FormMethod.Post, new { @class = "ui form", id = "writeEditForm" }))
    {
        @Html.HiddenFor(x => x.Id)
        <div class="field">
            @Html.TextBoxFor(x => x.Header, new { placeholder = Html.DisplayNameFor(x => x.Header), oninput = "onHeaderInput(this)" })
        </div>
        @Html.HiddenFor(x => x.Cover)
        @Html.HiddenFor(x => x.Content)
        <input type="file" id="wrapperImg" style="display: none" />
        <div class="two fields">
            <div class="field">
                @Html.TextAreaFor(x => x.Description, new { @placeholder = Html.DisplayNameFor(y => y.Description) })
                <div class="ui error message"></div>
            </div>
            <div class="field">
                <div class="ui fluid search multiple selection dropdown" id="select-tags">
                    <i class="dropdown icon"></i>
                    @Html.HiddenFor(x => x.Tags, new { Value = tagsRow })
                    <div class="default text">Теги</div>
                    <div class="menu">
                        @foreach (var aTag in Model.AvailableTags)
                        {
                            <div class="item" data-value="@aTag">@aTag</div>
                        }
                    </div>
                </div>
                <div class="ui blue icon message">
                    <i class="info icon"></i>
                    <div class="content">
                        <div class="header">
                            Внимание!
                        </div>
                        <p>
                            Вы также можете добавлять другие тематические теги,
                            <b>не включенные в список сервиса</b> (теги, содержащие названия, бренды и пр., будут удаляться).
                        </p>
                    </div>
                </div>
                <div class="ui margined fluid search multiple selection dropdown" id="select-chars">
                    <i class="dropdown icon"></i>
                    @Html.HiddenFor(x => x.Characters, new { Value = charsRow })
                    <div class="default text">Персонажи</div>
                    <div class="menu">
                        @foreach (var item in Model.AvailableCharacters)
                        {
                            <div class="item" data-value="@item.Value">@item.Text</div>
                        }
                    </div>
                </div>
                @if (Model.AvailableTariffs != null && Model.AvailableTariffs.Count > 0)
                {
                    <div class="ui fluid search selection dropdown" id="select-tariffs">
                        <i class="dropdown icon"></i>
                        @Html.HiddenFor(x => x.TariffId)
                        <div class="default text">Тарифы</div>
                        <div class="menu">
                            @foreach (var tariff in Model.AvailableTariffs)
                            {
                                <div class="item" data-value="@tariff.Value">@tariff.Text</div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        if (Model.Header == null)
        {
            <h2 id="title">@Html.DisplayNameFor(x => x.Header)</h2>
        }
        else
        {
            <h2 id="title">@Model.Header</h2>
        }
        <div id="editor">
            @if (!string.IsNullOrEmpty(Model.Content))
            {
                @Html.Raw(Model.Content)
            }
        </div>
    }
</div>
<div class="ui small modal" id="saveModal">
    <i class="close icon"></i>
    <div class="header">
        Опубликовать работу?
    </div>
    <div class="content">
        После публикации работу можно будет отредактировать в течение трёх дней.
        При нажатии "Нет" она сохранится в черновиках и будет доступна для изменений в любое время
    </div>
    <div class="actions">
        <button class="ui red cancel button">Нет, просто сохранить</button>
        <button class="ui green ok button">Да</button>
    </div>
</div>
@Scripts.Render("~/bundles/editor", "~/bundles/api")
@Styles.Render("~/Content/editor")
<script>
    function onHeaderInput(headerInput) {
        document.getElementById('title').innerText = headerInput.value;
    }
    function removeCover(){
        $('#Cover').val('');
        $('#img-wrapper').html('');
        $('#img-wrapper').parent('.row').hide();
    }
    
    function readImage(file, evt) {
        var reader = new FileReader();
        reader.onload = function () {
            $('#img-wrapper').html('<img src="' + reader.result + '" style="max-width: 100%"/>');
            $('#img-wrapper').parent('.row').show();
            $('#Cover').val(reader.result);
        }
        isCoverLarge = file.size / 1024 / 1024 > 20;
        reader.readAsDataURL(file);
    }
    function inputDownloadHandler(evt) {
        var file = evt.target.files[0];
        readImage(file, evt);
    }
    
    var isCoverLarge = false,
        postId = '@Model.Id',
        defaultId = '@Guid.Empty',
        formData;

    $(function () {
        ViewHelper.activateSidebarItem('#editDocItem');
        ViewHelper.disableFormSubmitting('#writeEditForm');
        $('#select-tags').dropdown({
            allowAdditions: true,
            fullTextSearch: true,
            keys: {
                delimiter: 13
            },
            match: 'text',
            forceSelection: false
        });
        $('#select-chars,#select-tariffs').dropdown({
            fullTextSearch: true,
            keys: {
                delimiter: 13
            },
            match: 'text',
            forceSelection: false
        });
        ClassicEditor.create($('#editor')[0], {
            language: 'ru',
            miteUpload: {
                uploadUrl: '@Url.Action("UploadDocImg", "Files")'
            },
            save: {
                callback: function (data) {
                    var isPublished = @Model.IsPublished.ToString().ToLower();
                    $('#Content').val(data);
                    console.log(data);
                    return isPublished ? Posts.Api.saveArticle('@saveUrl', false)
                        : new Promise(function (resolve) {
                            $("#saveModal").modal('show');
                            resolve();
                        });
                }
            }
        }).catch(function (error) {
            console.error(error)
        });
        @Html.Raw(Html.FormValidation<Mite.Models.WritingPostModel>("#writeEditForm"))
        
        $("#saveModal").modal({
            onDeny: function () {
                Posts.Api.saveArticle('@saveUrl', false);
            },
            onApprove: function () {
                Posts.Api.saveArticle('@saveUrl', true);
            }
        });
        var wrapperInput = document.getElementById("wrapperImg");
        wrapperInput.onchange = inputDownloadHandler;
    });
</script>