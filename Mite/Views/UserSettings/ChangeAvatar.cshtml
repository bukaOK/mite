@model string

<div class="ui stackable two column center aligned grid change-avatar">
    <div class="column">
        <form class="ui form" id="changeAvaForm">
            <input type="file" id="ava-download" style="display: none">
            <label class="ui dashed drop-zone segment" ondragover="dragOverHandler(event)" ondrop="dropHandler(event)">
                <span class="ui small blue header"><i class="cloud download icon"></i>Перетащите или нажмите</span>
                <input type="file" onchange="inputDownloadHandler(event)" />
            </label>
            <div class="ui teal progress" id="ava-progress"></div>
            <button type="button" class="ui fluid green button" id="save-btn">Сохранить</button>
            <div class="ui divider"></div>
            <button class="ui ava-rotate primary left labeled icon button" data-deg="-90" style="display: none">
                <i class="reply icon"></i>Влево
            </button>
            <button class="ui ava-rotate primary right labeled icon button" data-deg="90" style="display: none">
                Вправо<i class="share icon"></i>
            </button>
            <div class="ui error message"></div>
            <div class="ui m-success green message">
                Аватарка успешно обновлена
            </div>
        </form>
    </div>
    <div class="column">
        <div class="avatar edit" style="display: none"></div>
    </div>
</div>
@Scripts.Render("~/bundles/croppie")
<script>
    function readFile(file, evt) {
        var reader = new FileReader(),
            $progress = $('#ava-progress'),
            $form = $('#changeAvaForm');
        if (file.type.split('/')[0] !== 'image') {
            $form.form('add errors', ['Неверный формат изображения']);
            return;
        }
        reader.onloadstart = function () {
            $progress.progress();
        }
        reader.onprogress = function (ev) {
            if (settings.progress && ev.lengthComputable) {
                var percentLoaded = Math.round((ev.loaded / ev.total) * 100);
                $progress.progress('set percent', percentLoaded);
            }
        };
        reader.onloadend = function () {
            $progress.progress('set percent', 100);
        };
        reader.onload = function () {
            uploadCrop.show();
            $("#save-btn").show();
            $('.ava-rotate').show();
            uploadCrop.croppie('bind', reader.result);
        };
        reader.readAsDataURL(file);
    }
    
    function dragOverHandler(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = "copy";
    }
    
    function dropHandler(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        var file = evt.dataTransfer.files[0];
        readFile(file, evt);
    }
    function inputDownloadHandler(evt) {
        var file = evt.target.files[0];
        readFile(file, evt);
    }
    var uploadCrop = $('.avatar.edit');
    uploadCrop.croppie({
        viewport: {
            width: 150,
            height: 150,
            type: 'circle'
        },
        boundary: {
            width: $('.cr-boundary').parents('.column').width() * 0.77,
            height: 400
        },
        enableOrientation: true
    });
    $('.ava-rotate').click(function () {
        $('.avatar.edit').croppie('rotate', +$(this).data('deg'));
    })
    $('#save-btn')
        .click(function (event) {
            var saveBtn = this;
            uploadCrop.croppie('result', {
                    circle: false,
                    type: 'blob'
                }).then(function (res) {
                    UserSettingsApi.changeAvatar(res, saveBtn);
                });
        });
</script>