@using Mite.Helpers
@using Mite.CodeData.Enums
@model Mite.Models.ProfileModel

@{
    ViewBag.Title = "Профиль " + Model.UserName;
    var pageUserName = Model.UserName.ToLower();
    var currentUserName = User.Identity.Name.ToLower();
    var isMobileDevice = ViewHelper.IsMobileDevice(Request);
}
@section styles{
    <style>
        .center.aligned.statistics{
            justify-content: center;
        }
        .ui.tab.grid{
            height: auto;
            margin-top: 0;
            margin: -1rem;
        }
        p.about{
            font-size: 1.1em;
        }
    </style>
}
<div class="ui stackable grid">
    <div class="center aligned three wide column">
        <div class="ui segment">
            <img src="@Model.AvatarSrc" class="ui centered tiny circular image" width="80" height="80" />
            <h2 class="ui header">@Model.UserName</h2>
            <div class="ui center aligned small statistics">
                <div class="statistic">
                    <div class="value">@Model.Reliability</div>
                    <div class="label">Надежность</div>
                </div>
                <div class="small statistic">
                    <div class="value">@Model.FollowingsCount</div>
                    <div class="label">@ViewHelper.GetWordCase(Model.FollowingsCount, "Подписка", "Подписки", "Подписок")</div>
                </div>
            </div>
            <div class="ui divider"></div>
            <p class="about">@Model.About</p>
            @if (Model.ExternalLinks != null && Model.ExternalLinks.Count() > 0)
            {
                foreach (var link in Model.ExternalLinks)
                {
                    <a href="@link" class="link">
                        <i class="@link.IconClass icon"></i>
                        @link.ShowUrl
                    </a><br />
                }
            }
        </div>
    </div>
    <div class="thirteen wide column">
        <div class="ui stackable tabs menu" role="tablist">
            <a class="active item" role="tab" data-tab="followings">Подписки</a>
            <a class="item" role="tab" data-tab="favorites">Избранное</a>
            <div class="right item">
                <i class="filter icon"></i>
                Сначала&nbsp;
                <div class="ui inline dropdown" id="sortDropDown">
                    <div class="text">новые</div>
                    <i class="dropdown icon"></i>
                    <div class="menu">
                        <div class="active item" data-text="новые" data-value="@((byte)SortFilter.New)">Новые</div>
                        <div class="item" data-text="высший рейтинг" data-value="@((byte)SortFilter.Popular)">Высший рейтинг</div>
                        <div class="item" data-text="старые" data-value="@((byte)SortFilter.Old)">Старые</div>
                    </div>
                </div>
            </div>
        </div>
        @if (isMobileDevice)
        {
            <div class="ui loading active tab two column stackable grid" data-tab="followings"></div>
            <div class="ui tab two column stackable grid" data-tab="favorites"></div>
        }
        else
        {
            <div class="ui loading basic active tab three column stackable grid segment" data-tab="followings"></div>
            <div class="ui tab three column stackable grid" data-tab="favorites"></div>
        }
    </div>
</div>
@{ Html.RenderPartial("_ClientTemplates", Model); }
@section scripts{
    @Scripts.Render("~/bundles/grid", "~/bundles/jsrender")
    <script>
        var isOwner = @((currentUserName == pageUserName).ToString().ToLower());
        $(function () {
            var grids = [];
            $('.tab.grid[data-tab]').each(function (index, elem) {
                grids.push({
                    tabName: elem.dataset.tab,
                    elem: $(elem).masonry()
                });
            });
            var followingsTab = new Tab({
                parentTab: null,
                name: 'followings',
                isActive: true,
                tmplSelector: '#followersTmpl',
                emptyTmplSelector: '#emptyFollowingsTmpl'
            });
            var favoritesTab = new Tab({
                parentTab: null,
                name: 'favorites',
                isActive: false,
                tmplSelector: '#favoritePostsTmpl',
                emptyTmplSelector: '#emptyPostTmpl'
            });
            TabFilter.Tabs.items = [followingsTab, favoritesTab];
            TabFilter.Filters.add({
                name: 'sort',
                elem: $('#sortDropDown'),
                getVal: function () {
                    return this.elem.dropdown('get value') == ''
                        ? '@((byte)SortFilter.New)'
                        : this.elem.dropdown('get value');
                },
                updateState: function (newVal) {
                    this.elem.dropdown('set selected', newVal);
                }
            });
            TabFilter.init('@Url.Action("Index", "UserProfile", new { name = Model.UserName })', {
                beforeLoad: function(){
                    $('.active.tab').addClass('loading');
                },
                onSuccess: function(resp, tab){
                    var html;
                    if(resp.length == 0 && TabFilter.page == 1){
                        html = $(tab.emptyTmplSelector).html();
                        tab.content.html(html);
                    } else if(resp.length > 0) {
                        var tmpl = $.templates(tab.tmplSelector);
                        if (tab.name === 'favorites') {
                            resp.forEach(function (elem) {
                                elem.LastEdit += elem.LastEdit[elem.LastEdit - 1] == 'Z' ? '' : 'Z';
                                if (elem.PublishDate != null) {
                                    elem.PublishDate += elem.PublishDate[elem.PublishDate - 1] == 'Z' ? '' : 'Z';
                                    elem.PublicTimeStr = ViewHelper.getPastTense(new Date(elem.PublishDate).getTime());
                                } else {
                                    elem.PublicTimeStr = ViewHelper.getPastTense(new Date(elem.LastEdit).getTime());
                                }
                            });
                        }
                        html = tmpl.render(resp);

                        if(TabFilter.loadNextPage) {
                            tab.content.append(html);
                        } else{
                            tab.content.html(html);
                        }
                    }
                    $('.active.tab').removeClass('loading');
                    for(var i = 0; i < grids.length; i++){
                        if(tab.name == grids[i].tabName){
                            grids[i].elem.masonry('reloadItems');
                            grids[i].elem.imagesLoaded(function(){
                                grids[i].elem.masonry('layout');
                            }).progress(function(){
                                grids[i].elem.masonry('layout');
                            });
                            break;
                        }
                    }
                },
                onError: function () {
                    $('.active.tab').removeClass('loading');
                },
                ajax: {
                    type: 'post'
                }
            });
            $('#sortDropDown').dropdown({
                onChange: function () {
                    TabFilter.refresh();
                }
            });
        });
    </script>
}

