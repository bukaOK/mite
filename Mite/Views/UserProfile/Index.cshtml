@using Mite.CodeData.Enums
@using Mite.Helpers
@model Mite.Models.ProfileModel

@{
    ViewBag.Title = "Профиль " + Model.UserName;
    ViewBag.MetaDescription = string.IsNullOrEmpty(Model.About) ? $"Страница пользователя {Model.UserName}" : Model.About;

    var openGraphMeta = new Dictionary<string, string>
    {
        { "og:title", ViewBag.Title },
        { "og:type", "profile" },
        { "og:image", $"{Request.Url.Scheme}://{Request.Url.Host}/{Model.AvatarSrc}" },
        { "og:url", Url.Action("Index", "UserProfile", new{name = Model.UserName}, "http") }
    };

    var pageUserName = Model.UserName.ToLower();
    var currentUserName = User.Identity.Name.ToLower();
    var isMobileDevice = ViewHelper.IsMobileDevice(Request);
}
@section meta{
    @ViewHelper.GenerateMeta(openGraphMeta)
}
@section styles{
    <style>
        [data-tab=followers].grid.tab>.column, [followings].grid.tab>.column{
            padding: 1rem 0.5rem 0rem 0.5rem;
        }
        .link{
            color: rgba(0,0,0,0.8);
            transition: color linear 0.3s;
        }
        .link:hover{
            color: #b540c6;
        }
        .ui.dropdown#sortDropdown .item[data-value="3"]{
            display: none;
        }
        #avatar-img{
            width: 150px;
            height: 150px;
        }
    </style>
}
<div class="ui profile center aligned three column stackable grid segment">
    <div class="computer tablet only row">
        <div class="right aligned column">
            @if (Model.YandexWalId != null)
            {
                <button class="ui primary icon button" onclick="$('#donateModal').modal('show')">
                    <i class="heart icon"></i>
                    Поддержать
                </button>
            }
            <h4 class="ui header">
                <span class="content"><i class="map marker alternate icon"></i>@Model.PlaceName</span>
            </h4>
        </div>
        <div class="column">
            <div class="ui centered circular image" id="avatar-img">
                @if(currentUserName == pageUserName)
                {
                    <div class="ui center aligned dimmer">
                        <div class="content">
                            <a class="ui huge black circular avatar icon button" href="@Url.Action("ChangeAvatar", "UserSettings")"><i class="photo icon"></i></a>
                        </div>
                    </div>
                }
                <img src="@Model.AvatarSrc" width="150" height="150" />
            </div>
            <h2 class="ui header">
                @Model.UserName
                <span class="sub header">
                    @Model.About
                </span>
            </h2>
            @foreach(var link in Model.ExternalLinks)
            {
                <a href="@link.Url" class="link" target="_blank">
                    <i class="@link.IconClass icon"></i>
                    @link.ShowUrl
                </a><br />
            }
        </div>
        <div class="left aligned column">
            @if (User.Identity.IsAuthenticated)
            {
                <form class="ui form">
                    @if(currentUserName != pageUserName)
                    {
                        <button type="button" class="ui green button" onclick="FollowersApi.add('@Model.UserId', this)"@Html.Raw(Model.IsFollowing ? " style=\"display: none\"" : "")>
                            <i class="add user icon"></i>Подписаться
                        </button>
                        <button type="button" class="ui red button" onclick="FollowersApi.delete('@Model.UserId', this)"@Html.Raw(!Model.IsFollowing ? " style=\"display: none\"" : "")>
                            <i class="remove user icon"></i>Отписаться
                        </button>
                        <div class="ui top center blue user-actions floating icon dropdown button">
                            <i class="dropdown icon"></i>
                            <div class="menu" role="menu">
                                <div class="blist item" role="menuitem" onclick="BlackListApi.remove('@Model.UserId', this)" @Html.Raw(!Model.BlackListed ? "style=\"display: none\"" : "") title="Убрать из черного списка">
                                    Убрать из ЧС
                                </div>
                                <div class="blist item" role="menuitem" onclick="BlackListApi.add('@Model.UserId', this)" @Html.Raw(Model.BlackListed ? "style=\"display: none\"" : "") title="Добавить в черный список">
                                    Добавить в ЧС
                                </div>
                                @if (Model.CanWrite)
                                {
                                    <div class="item" role="menuitem" onclick="ChatsApi.createCompanionChat('@Model.UserId', this)">Написать</div>
                                }
                                @if (User.IsInRole(RoleNames.Moderator))
                                {
                                    <div class="item" onclick="RatingMvc.recount('@Model.UserId', '@RatingRecountTypes.User', this)" role="menuitem">Пересчитать рейтинг</div>
                                    <div class="item" onclick="DealsMvc.recountReliability('@Model.UserId', '@ReliabilityRecountTypes.User', this)" role="menuitem">Пересчитать надежность</div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <a href="/user/settings" class="ui blue button"><i class="setting icon"></i>Настройки</a>
                    }
                    <div class="ui error message"></div>
                </form>
            }
        </div>
    </div>
    <div class="stackable mobile only row">
        <div class="column">
            <img class="ui centered circular image" src="@Model.AvatarSrc" width="150" height="150" />
            <h2 class="ui header">
                @Model.UserName
                <span class="sub header">
                    @Model.About
                </span>
            </h2>
        </div>
        <div class="column">
            @if (Model.YandexWalId != null)
            {
                <button class="ui green labeled icon button" onclick="$('#donateModal').modal('show')">
                    <i class="heart icon"></i>
                    Поддержать
                </button>
            }
        </div>
        <div class="column">
            @if (currentUserName != pageUserName && !Model.IsFollowing && User.Identity.IsAuthenticated)
            {
                <button class="ui primary button" onclick="FollowersApi.add('@Model.UserId', this)">
                    <i class="add user icon"></i>Подписаться
                </button>
                <button class="ui red button" onclick="FollowersApi.delete('@Model.UserId', this)" style="display: none">
                    <i class="remove user icon"></i>Отписаться
                </button>
            }
            @if (Model.IsFollowing)
            {
                <button class="ui red button" onclick="FollowersApi.delete('@Model.UserId', this)">
                    <i class="remove user icon"></i>Отписаться
                </button>
                <button class="ui primary button" onclick="FollowersApi.add('@Model.UserId', this)" style="display: none">
                    <i class="add user icon"></i>Подписаться
                </button>
            }
        </div>
    </div>
    <div class="four column row">
        <div class="column">
            <div class="ui small statistic">
                <div class="value">
                    @Model.FollowersCount
                </div>
                <div class="label">
                    @ViewHelper.GetWordCase(Model.FollowersCount, "Подписчик", "Подписчика", "Подписчиков")
                </div>
            </div>
        </div>
        <div class="column">
            <div class="ui small statistic">
                <div class="value">
                    @Model.Reliability
                </div>
                <div class="label">Надежность</div>
            </div>
        </div>
        <div class="column">
            <div class="ui small statistic">
                <div class="value">
                    @Model.Rating
                </div>
                <div class="label">
                    Рейтинг
                </div>
            </div>
        </div>
        <div class="column">
            <div class="ui small statistic">
                <div class="value">
                    @Model.PostsCount
                </div>
                <div class="label">
                    @ViewHelper.GetWordCase(Model.PostsCount, "Работа", "Работы", "Работ")
                </div>
            </div>
        </div>
    </div>
</div>
<div class="ui tabs stackable menu" id="tabs-context">
    @if (currentUserName == pageUserName)
    {
        <a class="active item" data-tab="posts">Работы</a>
        <a class="item" data-tab="followings">Я подписан</a>
    }
    else
    {
        <a class="active item" data-tab="posts/published">Работы</a>
    }
    <a class="item" id="followers-tab" data-tab="followers">Подписчики</a>
    <a class="item" data-tab="favorites">Избранное</a>
    <a class="item" data-tab="services">Услуги</a>
    <a class="item" data-tab="products">Товары</a>
    <div class="right item" id="postFilter">
        <i class="filter icon"></i>
        Сначала&nbsp;
        <div class="ui inline dropdown" id="sortDropdown">
            <div class="text">новые</div>
            <i class="dropdown icon"></i>
            <div class="menu">
                <div class="active item" data-text="новые" data-value="@((byte)SortFilter.New)">Новые</div>
                <div class="item" data-text="высший рейтинг" data-value="@((byte)SortFilter.Popular)">Высший рейтинг</div>
                <div class="item" data-text="надежные" data-value="@((byte)SortFilter.Reliable)">Надежные</div>
                <div class="item" data-text="старые" data-value="@((byte)SortFilter.Old)">Старые</div>
            </div>
        </div>
    </div>
</div>
@if (currentUserName == pageUserName)
{
    <div class="ui tab" data-tab="posts">
        <div class="ui stackable center aligned labeled icon secondary tabs menu">
            <a class="active item" data-tab="published">
                <i class="announcement icon"></i>
                Публикации
            </a>
            <a class="item" data-tab="drafts">
                <i class="edit icon"></i>
                Черновики
            </a>
            <a class="item" data-tab="blocked">
                <i class="lock icon"></i>
                Блокированные
            </a>
        </div>
        @if (isMobileDevice)
        {
            <div class="ui tab stackable two column grid basic segment" data-tab="published"></div>
            <div class="ui tab stackable two column basic segment grid" data-tab="drafts"></div>
            <div class="ui tab stackable two column basic segment grid" data-tab="blocked"></div>
        }
        else
        {
            <div class="ui tab four column doubling grid basic segment" data-tab="published"></div>
            <div class="ui tab four column doubling basic segment grid" data-tab="drafts"></div>
            <div class="ui tab four column doubling basic segment grid" data-tab="blocked"></div>
        }
    </div>
    if (isMobileDevice)
    {
        <div class="ui tab stackable three column basic segment grid" data-tab="followers"></div>
        <div class="ui tab stackable three column basic segment grid" data-tab="followings"></div>
        <div class="ui tab stackable two column basic segment grid" data-tab="services"></div>
        <div class="ui tab stackable two column basic segment grid" data-tab="products"></div>
        <div class="ui tab stackable two column basic segment grid" data-tab="favorites"></div>
    }
    else
    {
        <div class="ui tab four column doubling basic segment grid" data-tab="followers"></div>
        <div class="ui tab four column doubling basic segment grid" data-tab="followings"></div>
        <div class="ui tab three column doubling basic segment grid" data-tab="services"></div>
        <div class="ui tab four column basic segment grid" data-tab="products"></div>
        <div class="ui tab stackable four column basic segment grid" data-tab="favorites"></div>
    }
    <div class="dot-loader-wrapper">
        <div class="dot-loader">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </div>
}
else
{
    <div class="ui stackable grid">
        <div class="three wide column">
            <div class="ui loading segment">
                <div class="ui dividing header" id="dailyFactHeader">Факт дня</div>
                <p id="dailyFactDesc"></p>
            </div>
            @if (Model.ShowAd)
            {
                <div class="ui segment">
                    <h4 class="ui dividing header">Реклама</h4>
                    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
                    <!-- TopAd -->
                    <ins class="adsbygoogle"
                         style="display:block"
                         data-ad-client="ca-pub-7675079294669395"
                         data-ad-slot="2018290469"
                         data-ad-format="auto"></ins>
                    <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
                </div>
            }
        </div>
        <div class="thirteen wide column">
            @if (isMobileDevice)
            {
                <div class="ui tab stackable two column basic segment grid" data-tab="posts/published"></div>
                <div class="ui doubling tab three column basic segment grid" data-tab="followers"></div>
                <div class="ui tab stackable two column basic segment grid" data-tab="services"></div>
                <div class="ui tab stackable two column basic segment grid" data-tab="products"></div>
                <div class="ui tab stackable two column basic segment grid" data-tab="favorites"></div>
            }
            else
            {
                <div class="ui tab three column basic segment grid" data-tab="posts/published"></div>
                <div class="ui tab four column basic segment grid" data-tab="followers"></div>
                <div class="ui tab three column basic segment grid" data-tab="services"></div>
                <div class="ui tab three column basic segment grid" data-tab="products"></div>
                <div class="ui tab stackable three column basic segment grid" data-tab="favorites"></div>
            }
            <div class="dot-loader-wrapper">
                <div class="dot-loader">
                    <div class="dot"></div>
                    <div class="dot"></div>
                    <div class="dot"></div>
                </div>
            </div>
        </div>
    </div>
}
@{ Html.RenderPartial("_Modals"); }
@{ Html.RenderPartial("_Templates", Model); }
@Scripts.Render("~/bundles/jsrender", "~/bundles/grid", "~/bundles/api")
<script>
    var delPostId;
    var isOwner = @((currentUserName == pageUserName).ToString().ToLower());
    function changeTab() {

    }
    function publishPost(postId){
        $.ajax({
            url: '@Url.Action("PublishPost", "Posts")' + '/' + postId,
            type: 'post',
            success: function (){
                window.location.reload();
            },
            error: function(){
                alert('Ошибка при попытке публикации');
            }
        });
    }
    function showDeletePostModal(postId){
        delPostId = postId;
        $('#confirmPostDelete').modal('show');
    }
    function loadFullGif(newPath, postId, $button) {
        $button.addClass('loading');

        var postSelector = '#post' + postId;
        var $img = $(postSelector + ' .img-content .image');
        $img.attr('src', newPath);
        $img.on('load', function () {
            $(postSelector + ' .gif-wrapper').removeClass('active');
            $button.removeClass('loading');
        });
    }
    $(function () {
        $('.radio.checkbox').checkbox();
        $('.user-actions').dropdown({
            action: 'hide',
            //context: $(this).parents('.column')[0]
        });
        $('#donateForm').form({
            on: 'submit',
            fields: {
                sum: {
                    rules: [
                        {
                            type: 'integer',
                            prompt: 'В качестве суммы укажите целое число'
                        }
                    ]
                },
                paymentType: {
                    rules: [
                        {
                            type: 'empty',
                            prompt: 'Выберите тип оплаты'
                        }
                    ]
                }
            }
        });
        DailyFactsApi.getDailyFact();
        $('#userActionsDrop').dropdown({
            action: 'nothing',
            transition: 'slide right',
            duration: 300
        });
        var currentUser = '@currentUserName'
        var pageUser = '@pageUserName';
        if (currentUser === pageUser) {
            $('#avatar-img').dimmer({
                opacity: 0.3,
                on: 'hover'
            });
        }
        var grids = [];
        $('.tab.grid[data-tab]').each(function (index, elem) {
            grids.push({
                tabName: elem.dataset.tab,
                elem: $(elem).masonry()
            });
        });
        if(isOwner){
            ViewHelper.activateSidebarItem('.user-profile.item');
        }
        var deletePostModal = $('#confirmPostDelete').modal({
            onApprove: function() {
                var postId = delPostId;
                var deleteElem = $('.column[data-post-id="' + postId + '"]')[0];
                $.ajax({
                    url: '/posts/deletepost/' + postId,
                    type: 'post',
                    success: function (data) {
                        var tab = TabFilter.Tabs.getLastActiveTab();
                        $('.tab[data-tab="' + tab.name + '"]').masonry('remove', deleteElem).masonry('layout');
                    },
                    error: function (jqXhr) {
                    }
                });
            }
        });
        if(isOwner){
            var postsTab = new Tab({
                parentTab: null,
                name: 'posts',
                isActive: true,
            });
            var publishedTab = new Tab({
                parentTab: postsTab,
                name: 'published',
                isActive: true,
                tmplSelector: '#postsTmpl',
                emptyTmplSelector: '#emptyPostTmpl'
            });
            var blockedTab = new Tab({
                parentTab: postsTab,
                name: 'blocked',
                isActive: false,
                tmplSelector: '#postsTmpl',
                emptyTmplSelector: '#emptyBlockedTmpl'
            });
            var draftsTab = new Tab({
                parentTab: postsTab,
                name: 'drafts',
                isActive: false,
                tmplSelector: '#postsTmpl',
                emptyTmplSelector: '#emptyPostTmpl'
            });
            var followingsTab = new Tab({
                parentTab: null,
                name: 'followings',
                range: 50,
                isActive: false,
                tmplSelector: '#followersTmpl',
                emptyTmplSelector: '#emptyFollowingsTmpl'
            });
            TabFilter.Tabs.items = [postsTab, publishedTab, draftsTab, blockedTab, followingsTab];
        } else{
            var postsTab = new Tab({
                parentTab: null,
                name: 'posts/published',
                tmplSelector: '#postsTmpl',
                emptyTmplSelector: '#emptyPostTmpl',
                isActive: true
            });
            TabFilter.Tabs.items = [postsTab];
        }
        var followersTab = new Tab({
            parentTab: null,
            name: 'followers',
            isActive: false,
            range: 50,
            tmplSelector: '#followersTmpl',
            emptyTmplSelector: '#emptyFollowersTmpl'
        });
        var favoritesTab = new Tab({
            parentTab: null,
            name: 'favorites',
            isActive: false,
            tmplSelector: '#favoritePostsTmpl',
            emptyTmplSelector: '#emptyPostTmpl'
        });
        var servicesTab = new Tab({
            parentTab: null,
            name: 'services',
            isActive: false,
            tmplSelector: '#servicesTmpl',
            emptyTmplSelector: '#emptyServicesTmpl'
        });
        var productsTab = new Tab({
            parentTab: null,
            name: 'products',
            isActive: false,
            tmplSelector: '#productsTmpl',
            emptyTmplSelector: '#emptyProductsTmpl'
        });
        TabFilter.Tabs.items.push(followersTab, servicesTab, favoritesTab, productsTab);
        TabFilter.Filters.add({
            name: 'sort',
            elem: $('#sortDropdown'),
            getVal: function(){
                return this.elem.dropdown('get value') === '' ? '@((byte)SortFilter.New)' : this.elem.dropdown('get value');
            },
            updateState: function(newVal){
                this.elem.dropdown('set selected', newVal);
            }
        });
        TabFilter.init('@Url.Action("Index", "UserProfile", new{ name = Model.UserName })', {
            beforeLoad: function(){
                $('.dot-loader-wrapper').addClass('active');
            },
            onSuccess: function(resp, tab){
                var html;
                if(resp.length == 0 && TabFilter.page == 1){
                    html = $(tab.emptyTmplSelector).html();
                    tab.content.html(html);
                    $('.dot-loader-wrapper').removeClass('active');
                } else if(resp.length > 0) {
                    if((tab.parentTab && tab.parentTab.name === 'posts') || tab.name === 'posts/published' || tab.name === 'favorites'){
                        resp.forEach(function(elem){
                            elem.LastEdit += elem.LastEdit[elem.LastEdit - 1] == 'Z' ? '' : 'Z';
                            if(elem.PublishDate != null){
                                elem.PublishDate += elem.PublishDate[elem.PublishDate - 1] == 'Z' ? '' : 'Z';
                                elem.PublicTimeStr = ViewHelper.getPastTense(new Date(elem.PublishDate).getTime());
                            } else{
                                elem.PublicTimeStr = ViewHelper.getPastTense(new Date(elem.LastEdit).getTime());
                            }
                        });
                    }
                    var tmpl = $.templates(tab.tmplSelector);
                    html = tmpl.render(resp);

                    if(TabFilter.loadNextPage) {
                        tab.content.append(html);
                    } else{
                        tab.content.html(html);
                    }
                }
                var $dimm = $('.post-item.hide-adult-content:not(.dimmed,.dimmable)');
                $dimm.dimmer({
                    closable: false
                });
                $dimm.dimmer('show');
                for(var i = 0; i < grids.length; i++){
                    if(tab.name == grids[i].tabName){
                        grids[i].elem.masonry('reloadItems');
                        grids[i].elem.imagesLoaded(function(){
                            grids[i].elem.masonry('layout');
                            $('.dot-loader-wrapper').removeClass('active');
                            resp.forEach(function(elem){
                                $('#post' + elem.Id + ' .dropdown.button,#service' + elem.Id + ' .dropdown.button,#prod' + elem.Id + ' .dropdown.button')
                                    .dropdown({
                                        action: 'hide',
                                        on: 'hover'
                                    });
                            });
                        }).progress(function(){
                            grids[i].elem.masonry('layout');
                        });
                        break;
                    }
                }
            },
            onError: function () {
                $('.dot-loader-wrapper').removeClass('active');
                iziToast.error({
                    title: 'Упс...',
                    message: 'Ошибка при загрузке работ'
                });
            },
            ajax: {
                type: 'post'
            }
        });
        Scrolling.init('footer', function () {
            if (!TabFilter.loading) {
                var lastTab = TabFilter.Tabs.getLastActiveTab();
                TabFilter.loadNext();
            }
        });
        $('#sortDropdown,#productSortDropdown,#serviceSortDropdown').dropdown({
            onChange: function(){
                TabFilter.refresh();
            }
        });
    });
</script>