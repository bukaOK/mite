@using Mite.CodeData.Enums
@using Mite.Helpers
@model Mite.Models.ProfileModel

@{
    ViewBag.Title = "Профиль " + Model.UserName;
    ViewBag.MetaDescription = string.IsNullOrEmpty(Model.About) ? $"Страница пользователя {Model.UserName}" : Model.About;

    var openGraphMeta = new Dictionary<string, string>
    {
        { "og:title", ViewBag.Title },
        { "og:type", "profile" },
        { "og:image", $"{Request.Url.Scheme}://{Request.Url.Host}/{Model.AvatarSrc}" },
        { "og:url", Url.Action("Index", "UserProfile", new{name = Model.UserName}, "http") }
    };

    var pageUserName = Model.UserName.ToLower();
    var currentUserName = User.Identity.Name.ToLower();
    var isMobileDevice = ViewHelper.IsMobileDevice(Request);
    var vkGroupLink = "";
    if(Model.ExternalLinks != null && Model.ExternalLinks.Count() > 0)
    {
        vkGroupLink = Model.ExternalLinks.FirstOrDefault(x => x.ShowUrl.Contains("vk.com/"))?.ShowUrl.Replace("vk.com/", "");
    }
}
@section meta{
    @ViewHelper.GenerateMeta(openGraphMeta)
}
@section styles{
    @Styles.Render("~/Content/userprofile")
}
<div class="ui grid">
    <div class="three wide column">
        <div class="ui center aligned segment">
            <div class="ui centered circular image" id="avatar-img">
                @if (currentUserName == pageUserName)
                {
                    <div class="ui center aligned dimmer">
                        <div class="content">
                            <a class="ui huge black circular avatar icon button" href="@Url.Action("ChangeAvatar", "UserSettings")"><i class="photo icon"></i></a>
                        </div>
                    </div>
                }
                <img src="@Model.AvatarSrc" width="100" height="100" />
            </div>
            <h2 class="ui centered header">
                @Model.UserName
                <span class="sub header">
                    @Model.About
                </span>
            </h2>
            @if (!string.IsNullOrEmpty(Model.PlaceName))
            {
                <h5 class="ui centered header">
                    <i class="map marker alternate icon"></i>
                    <span class="content">@Model.PlaceName</span>
                </h5>
            }
            @if (currentUserName != pageUserName)
            {
                <form class="ui form">
                    <div class="ui margined small compact basic buttons">
                        <button type="button" class="ui green button" onclick="FollowersApi.add('@Model.UserId', this)" @Html.Raw(Model.IsFollowing ? " style=\"display: none\"" : "")>
                            <i class="add user icon"></i> Подписаться
                        </button>
                        <button type="button" class="ui red button" title="Отписаться"
                                onclick="FollowersApi.delete('@Model.UserId', this)" @Html.Raw(!Model.IsFollowing ? " style=\"display: none\"" : "")>
                            <i class="remove user icon"></i> Отписаться
                        </button>
                        <div class="ui small compact user-actions floating icon dropdown button">
                            <i class="dropdown icon"></i>
                            <div class="menu" role="menu">
                                <div class="blist item" role="menuitem" onclick="BlackListApi.remove('@Model.UserId', this)" @Html.Raw(!Model.BlackListed ? "style=\"display: none\"" : "") title="Убрать из черного списка">
                                    Убрать из ЧС
                                </div>
                                <div class="blist item" role="menuitem" onclick="BlackListApi.add('@Model.UserId', this)" @Html.Raw(Model.BlackListed ? "style=\"display: none\"" : "") title="Добавить в черный список">
                                    Добавить в ЧС
                                </div>
                                @if (Model.CanWrite)
                                {
                                    <div class="item" role="menuitem" onclick="ChatsApi.createCompanionChat('@Model.UserId', this)">Написать</div>
                                }
                                @if (User.IsInRole(RoleNames.Moderator))
                                {
                                    <div class="item" onclick="RatingMvc.recount('@Model.UserId', '@RatingRecountTypes.User', this)" role="menuitem">Пересчитать рейтинг</div>
                                    <div class="item" onclick="DealsMvc.recountReliability('@Model.UserId', '@ReliabilityRecountTypes.User', this)" role="menuitem">Пересчитать надежность</div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="ui error message"></div>
                </form>
            }
            <a class="ui green small compact basic labeled icon margined button" target="_blank" href="@Url.Action("ClientList", "Tariff", new { authorname = Model.UserName })" title="Стать спонсором">
                <i class="heart icon"></i>
                Поддержать
            </a>
            @if (Model.ExternalLinks != null && Model.ExternalLinks.Count() > 0)
            {
                <div class="ui list">
                    @foreach (var link in Model.ExternalLinks)
                    {
                        <a href="@link.Url" class="item" target="_blank">
                            <i class="@link.IconClass icon"></i>
                            @link.ShowUrl
                        </a>
                    }
                </div>
            }
            <div class="ui tiny statistic">
                <div class="value">
                    @Model.FollowersCount
                </div>
                <div class="label">
                    @ViewHelper.GetWordCase(Model.FollowersCount, "Подписчик", "Подписчика", "Подписчиков")
                </div>
            </div>
            <div class="ui tiny statistic">
                <div class="value">
                    @Model.Reliability
                </div>
                <div class="label">Надежность</div>
            </div>
            <div class="ui tiny statistic">
                <div class="value">
                    @Model.Rating
                </div>
                <div class="label">
                    Рейтинг
                </div>
            </div>
            <div class="ui tiny statistic">
                <div class="value">
                    @Model.PostsCount
                </div>
                <div class="label">
                    @ViewHelper.GetWordCase(Model.PostsCount, "Работа", "Работы", "Работ")
                </div>
            </div>
            <div class="ui tiny statistic">
                <div class="value">
                    @Model.SponsorsCount
                </div>
                <div class="label">
                    @ViewHelper.GetWordCase(Model.SponsorsCount, "Спонсор", "Спонсора", "Спонсоров")
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Model.VkGroupId))
        {
            <div id="vk_groups"></div>
        }
        @if (Model.ShowAd)
        {
            <div class="ui segment">
                <h4 class="ui dividing header">Реклама</h4>
                <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
                <!-- TopAd -->
                <ins class="adsbygoogle"
                     style="display:block"
                     data-ad-client="ca-pub-7675079294669395"
                     data-ad-slot="2018290469"
                     data-ad-format="auto"></ins>
                <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
            </div>
        }
        <div class="ui loading segment">
            <div class="ui dividing header" id="dailyFactHeader">Факт дня</div>
            <p id="dailyFactDesc"></p>
        </div>
    </div>
    <div class="thirteen wide column">
        <div class="ui tabs stackable menu" id="tabs-context">
            @if (currentUserName == pageUserName)
            {
                <a class="active item" data-tab="posts">Работы</a>
                <a class="item" data-tab="followings" data-tmpl="#followersTmpl" data-empty-tmpl="#emptyFollowingsTmpl" data-range="50">Я подписан</a>
            }
            else
            {
                <a class="active item" data-tab="posts/published" data-tmpl="#postsTmpl" data-empty-tmpl="#emptyPostTmpl">Работы</a>
            }
            <a class="item" id="followers-tab" data-tab="followers" data-tmpl="#followersTmpl" data-empty-tmpl="#emptyFollowersTmpl">Подписчики</a>
            <a class="item" data-tab="services" data-tmpl="#servicesTmpl" data-empty-tmpl="#emptyServicesTmpl">Услуги</a>
            <div class="ui dropdown item" id="moreDropdown">
                <div class="text">Ещё</div>
                <i class="dropdown icon"></i>
                <div class="menu">
                    <a class="item" data-tab="favorites" data-tmpl="#favoritePostsTmpl" data-empty-tmpl="#emptyPostTmpl">Избранное</a>
                    <a class="item" data-tab="products" data-tmpl="#productsTmpl" data-empty-tmpl="#emptyProductsTmpl">Товары</a>
                    <a class="item" data-tab="sponsors" data-tmpl="#followersTmpl" data-empty-tmpl="#emptySponsorsTmpl">Спонсоры</a>
                </div>
            </div>
            <div class="right item" id="postFilter">
                <i class="filter icon"></i>
                Сначала&nbsp;
                <div class="ui inline dropdown" id="sortDropdown">
                    <div class="text">новые</div>
                    <i class="dropdown icon"></i>
                    <div class="menu">
                        <div class="active item" data-text="новые" data-value="@((byte)SortFilter.New)">Новые</div>
                        <div class="item" data-text="высший рейтинг" data-value="@((byte)SortFilter.Popular)">Высший рейтинг</div>
                        <div class="item" data-text="надежные" data-value="@((byte)SortFilter.Reliable)">Надежные</div>
                        <div class="item" data-text="старые" data-value="@((byte)SortFilter.Old)">Старые</div>
                    </div>
                </div>
            </div>
        </div>
        @if (currentUserName == pageUserName)
        {
            <div class="ui tab" data-tab="posts">
                <div class="ui stackable center aligned labeled icon secondary tabs menu">
                    <a class="active item" data-tab="published" data-tmpl="#postsTmpl" data-empty-tmpl="#emptyPostTmpl" data-parent="posts">
                        <i class="announcement icon"></i>
                        Публикации
                    </a>
                    <a class="item" data-tab="drafts" data-tmpl="#postsTmpl" data-empty-tmpl="#emptyPostTmpl" data-parent="posts">
                        <i class="edit icon"></i>
                        Черновики
                    </a>
                    <a class="item" data-tab="blocked" data-tmpl="#postsTmpl" data-empty-tmpl="#emptyBlockedTmpl" data-parent="posts">
                        <i class="lock icon"></i>
                        Блокированные
                    </a>
                </div>
                @if (isMobileDevice)
                {
                    <div class="ui tab stackable two column grid basic segment" data-tab="published"></div>
                    <div class="ui tab stackable two column basic segment grid" data-tab="drafts"></div>
                    <div class="ui tab stackable two column basic segment grid" data-tab="blocked"></div>
                }
                else
                {
                    <div class="ui tab three column doubling grid basic segment" data-tab="published"></div>
                    <div class="ui tab three column doubling basic segment grid" data-tab="drafts"></div>
                    <div class="ui tab three column doubling basic segment grid" data-tab="blocked"></div>
                }
            </div>

        }
        else
        {
            if (isMobileDevice)
            {
                <div class="ui tab stackable two column basic segment grid" data-tab="posts/published"></div>
            }
            else
            {
                <div class="ui tab three column basic segment grid" data-tab="posts/published"></div>
            }
        }
        @if (isMobileDevice)
        {
            <div class="ui tab stackable three column basic segment grid" data-tab="followers"></div>
            <div class="ui tab stackable three column basic segment grid" data-tab="followings"></div>
            <div class="ui tab stackable two column basic segment grid" data-tab="services"></div>
            <div class="ui tab stackable two column basic segment grid" data-tab="products"></div>
            <div class="ui tab stackable two column basic segment grid" data-tab="favorites"></div>
            <div class="ui tab stackable three column basic segment grid" data-tab="sponsors"></div>
        }
        else
        {
            <div class="ui tab four column doubling basic segment grid" data-tab="followers"></div>
            <div class="ui tab four column doubling basic segment grid" data-tab="followings"></div>
            <div class="ui tab three column doubling basic segment grid" data-tab="services"></div>
            <div class="ui tab three column basic segment grid" data-tab="products"></div>
            <div class="ui tab stackable four column basic segment grid" data-tab="favorites"></div>
            <div class="ui tab four column doubling basic segment grid" data-tab="sponsors"></div>
        }
        <div class="dot-loader-wrapper">
            <div class="dot-loader">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
        </div>
    </div>
</div>
@{ Html.RenderPartial("_Modals"); }
@{ Html.RenderPartial("_Templates", Model); }
@Scripts.Render("~/bundles/jsrender", "~/bundles/grid", "~/bundles/api")
<script>
    var delPostId;
    var isOwner = @((currentUserName == pageUserName).ToString().ToLower());
    function publishPost(postId) {
        $.post('/posts/publishpost/' + postId, null, function () {
            location.reload();
        }).fail(function () {
            iziToast.error({
                title: 'Ошибка при попытке публикации'
            });
        });
    }
    function showDeletePostModal(postId){
        delPostId = postId;
        $('#confirmPostDelete').modal('show');
    }
    function loadFullGif(newPath, postId, $button) {
        $button.addClass('loading');

        var postSelector = '#post' + postId;
        var $img = $(postSelector + ' .img-content .image');
        $img.attr('src', newPath);
        $img.on('load', function () {
            $(postSelector + ' .gif-wrapper').removeClass('active');
            $button.removeClass('loading');
        });
    }
    $(function () {
        $('.radio.checkbox').checkbox();
        $('.user-actions').dropdown({
            action: 'hide'
        });
        $('#moreDropdown').dropdown({
            action: 'hide',
            on: 'hover'
        });
        DailyFactsApi.getDailyFact();
        
        var currentUser = '@currentUserName'
        var pageUser = '@pageUserName';
        if (currentUser === pageUser) {
            $('#avatar-img').dimmer({
                opacity: 0.3,
                on: 'hover'
            });
        }
        var grids = [];
        $('.tab.grid[data-tab]').each(function (index, elem) {
            grids.push({
                tabName: elem.dataset.tab,
                elem: $(elem).masonry()
            });
        });
        if(isOwner){
            ViewHelper.activateSidebarItem('.user-profile.item');
        }
        var deletePostModal = $('#confirmPostDelete').modal({
            onApprove: function() {
                var postId = delPostId;
                var deleteElem = $('.column[data-post-id="' + postId + '"]')[0];
                $.post('/posts/deletepost/' + postId, null, function (data) {
                    var tab = TabFilter.Tabs.getLastActiveTab();
                    $('.tab[data-tab="' + tab.name + '"]').masonry('remove', deleteElem).masonry('layout');
                });
            }
        });
        var tabItems = [];
        $('.item[data-tab]').each(function (index, el) {
            var $el = $(el);
            var itemSettings = {
                name: $el.data('tab'),
                isActive: $el.hasClass('active'),
                tmplSelector: $el.data('tmpl'),
                emptyTmplSelector: $el.data('emptyTmpl'),
                parentTab: tabItems.find(function (tabItem) {
                    return tabItem.name == $el.data('parent');
                })
            }
            if ($el.data('range'))
                itemSettings.range = $el.data('range');
            tabItems.push(new Tab(itemSettings));
        });
        TabFilter.Tabs.items = tabItems;
        TabFilter.Filters.add({
            name: 'sort',
            elem: $('#sortDropdown'),
            getVal: function(){
                return this.elem.dropdown('get value') === '' ? '@((byte)SortFilter.New)' : this.elem.dropdown('get value');
            },
            updateState: function(newVal){
                this.elem.dropdown('set selected', newVal);
            }
        });
        TabFilter.init('@Url.Action("Index", "UserProfile", new{ name = Model.UserName })', {
            beforeLoad: function(){
                $('.dot-loader-wrapper').addClass('active');
            },
            onSuccess: function(resp, tab){
                var html;
                if(resp.length == 0 && TabFilter.page == 1){
                    html = $(tab.emptyTmplSelector).html();
                    tab.content.html(html);
                    $('.dot-loader-wrapper').removeClass('active');
                } else if(resp.length > 0) {
                    if((tab.parentTab && tab.parentTab.name === 'posts') || tab.name === 'posts/published' || tab.name === 'favorites'){
                        resp.forEach(function(elem){
                            elem.LastEdit += elem.LastEdit[elem.LastEdit - 1] == 'Z' ? '' : 'Z';
                            if(elem.PublishDate != null){
                                elem.PublishDate += elem.PublishDate[elem.PublishDate - 1] == 'Z' ? '' : 'Z';
                                elem.PublicTimeStr = ViewHelper.getPastTense(new Date(elem.PublishDate).getTime());
                            } else{
                                elem.PublicTimeStr = ViewHelper.getPastTense(new Date(elem.LastEdit).getTime());
                            }
                        });
                    }
                    var tmpl = $.templates(tab.tmplSelector);
                    html = tmpl.render(resp);

                    if(TabFilter.loadNextPage) {
                        tab.content.append(html);
                    } else{
                        tab.content.html(html);
                    }
                }
                var $dimm = $('.post-item.hide-content:not(.dimmed,.dimmable)');
                $dimm.dimmer({
                    closable: false
                });
                $dimm.dimmer('show');
                for(var i = 0; i < grids.length; i++){
                    if(tab.name == grids[i].tabName){
                        grids[i].elem.masonry('reloadItems');
                        grids[i].elem.imagesLoaded(function(){
                            grids[i].elem.masonry('layout');
                            $('.dot-loader-wrapper').removeClass('active');
                            resp.forEach(function(elem){
                                $('#post' + elem.Id + ' .dropdown.button,#service' + elem.Id + ' .dropdown.button,#prod' + elem.Id + ' .dropdown.button')
                                    .dropdown({
                                        action: 'hide',
                                        on: 'hover'
                                    });
                            });
                        }).progress(function(){
                            grids[i].elem.masonry('layout');
                        });
                        break;
                    }
                }
            },
            onError: function () {
                $('.dot-loader-wrapper').removeClass('active');
                iziToast.error({
                    title: 'Упс...',
                    message: 'Ошибка при загрузке работ'
                });
            },
            ajax: {
                type: 'post'
            }
        });
        Scrolling.init('footer', function () {
            if (!TabFilter.loading) {
                var lastTab = TabFilter.Tabs.getLastActiveTab();
                TabFilter.loadNext();
            }
        });
        $('#sortDropdown,#productSortDropdown,#serviceSortDropdown').dropdown({
            onChange: function(){
                TabFilter.refresh();
            }
        });
        @if (!string.IsNullOrEmpty(Model.VkGroupId))
        {
            <text>VK.Widgets.Group("vk_groups", { mode: 3, width: $('#avatar-img').parent().css('width') }, @Model.VkGroupId);</text>
        }
    });
</script>